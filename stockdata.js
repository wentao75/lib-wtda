!function(t,a){"object"==typeof exports&&"undefined"!=typeof module?a(exports):"function"==typeof define&&define.amd?define(["exports"],a):a((t=t||self)["@wt/lib-wtda"]={})}(this,(function(t){"use strict";const a=require("lodash"),e=require("os"),i=require("path"),n=require("fs"),r=n.promises,o=require("pino")({level:process.env.LOGGER||"info",prettyPrint:{levelFirst:!0,translateTime:"SYS:yyyy-mm-dd HH:MM:ss.l",crlf:!0},prettifier:require("pino-pretty")}),l={daily:"daily",info:"info",financial:"fin"};function c(){return i.join(e.homedir(),".wtda")}const s={daily:"daily",adjustFactor:"adjustFactor",suspendInfo:"suspendInfo",dailyBasic:"dailyBasic",moneyFlow:"moneyFlow",indexDaily:"indexDaily",income:"income",balanceSheet:"balanceSheet",cashFlow:"cashFlow",forecast:"forecast",express:"express",dividend:"dividend",financialIndicator:"financialIndicator",financialMainbiz:"financialMainbiz",disclosureDate:"disclosureDate",pledgeStat:"pledgeStat",pledgeDetail:"pledgeDetail"},d={daily:{name:"daily",path:l.daily,ext:""},adjustFactor:{name:"adjustFactor",path:l.daily,ext:".adj"},suspendInfo:{name:"suspendInfo",path:l.info,ext:".sus"},dailyBasic:{name:"dailyBasic",path:l.info,ext:".bsc"},moneyFlow:{name:"moneyFlow",path:l.info,ext:".mf"},indexDaily:{name:"indexDaily",path:l.daily,ext:""},income:{name:"income",path:l.financial,ext:".ic"},balanceSheet:{name:"balanceSheet",path:l.financial,ext:".bs"},cashFlow:{name:"cashFlow",path:l.financial,ext:".cf"},forecast:{name:"forecast",path:l.financial,ext:".fc"},express:{name:"express",path:l.financial,ext:".ep"},dividend:{name:"dividend",path:l.financial,ext:".dd"},financialIndicator:{name:"financialIndicator",path:l.financial,ext:".id"},financialMainbiz:{name:"financialMainbiz",path:l.financial,ext:".mb"},disclosureDate:{name:"disclosureDate",path:l.financial,ext:".dt"},pledgeStat:{name:"pledgeStat",path:l.financial,ext:".ps"},pledgeDetail:{name:"pledgeDetail",path:l.financial,ext:".pd"}};async function f(t,e){if(!s[t])throw new Error("不支持的数据类型："+t);if(a.isEmpty(e))throw new Error("未设置读取股票代码");let i={updateTime:null,data:[]},n=d[t];try{await h();let a=u(t,e);o.debug(`读取本地数据 ${e}.${t}，参数配置 %o，文件 ${a}`,n);try{i=JSON.parse(await r.readFile(a,"utf-8"))}catch(t){o.debug("读取文件时发生错误："+t),i={data:[]}}}catch(a){o.error(`从本地读取个股数据${t}时发生错误 ${a}`)}return i}function u(t,e){let n=d[t];if(!n)throw new Error("不支持的数据类型"+t);if(a.isEmpty(e))throw new Error("未设置读取股票代码");return i.join(c(),n.path,e+n.ext+".json")}async function h(){let t=c();try{await r.access(t,n.constants.F_OK|n.constants.R_OK|n.constants.W_OK)}catch(a){o.debug("检查数据根目录错误 "+a),await r.mkdir(t,{recursive:!0})}for(let a of Object.keys(l)){let e=i.join(t,l[a]);try{await r.access(e,n.constants.F_OK|n.constants.R_OK|n.constants.W_OK)}catch(t){o.debug(`检查目录${l[a]}错误 ${t}`),await r.mkdir(e,{recursive:!0})}}}h();const y=require("lodash"),p=require("moment"),w=require("@wt/lib-taskqueue"),g=require("@wt/lib-tushare"),m=require("pino")({level:process.env.LOGGER||"info",prettyPrint:{levelFirst:!0,translateTime:"SYS:yyyy-mm-dd HH:MM:ss.l",crlf:!0},prettifier:require("pino-pretty")}),$=require("path"),b=require("fs"),S=b.promises,x={[s.dividend]:s.dividend,[s.pledgeStat]:s.pledgeStat,[s.pledgeDetail]:s.pledgeDetail};async function D(t,a,e=!1){if(x[t])return E(a);if(y.isEmpty(t)||!s[t])throw Error("请填写正确的个股数据名称！"+t);if(y.isEmpty(a))throw Error("请填写正确的股票代码！"+a);let i;try{if(e){m.debug("需要强制更新数据："+a);try{let[e,n,r]=await g.queryStockInfo(t,a);i={updateTime:p().toISOString(),startDate:r,endDate:n,data:e},m.info(`个股数据${t}强制更新，代码 ${a}, 更新时间：${i.updateTime}, 更新时间范围: ${r} - ${n}, 总条数：${i.data&&i.data.length}`)}catch(e){throw m.error(`强制更新个股${a}数据${t}时出现错误：${e}`),e}}else{i=await f(t,a),m.debug(`读取本地数据${a}.${t}：${i.updateTime}, ${i.startDate}, ${i.endDate}, ${i.data&&i.data.length}`);let e="";if(i.data&&i.data.length>0){let t=i.endDate;e=p(t,"YYYYMMDD").add(1,"days").format("YYYYMMDD");let n=p();if(n.diff(e,"days")<=0&&n.hours()<15)return void m.log("没有新的数据，不需要更新 "+a)}let[n,r,o]=await g.queryStockInfo(t,a,e);i&&!i.startDate&&(i.startDate=o),n&&n.length>0?(i.updateTime=p().toISOString(),i.endDate=r,i.data.unshift(...n),m.info(`个股数据${t}更新，代码 ${a}, 更新时间：${i.updateTime}, 更新时间范围: ${o} - ${r}, 更新条数：${n&&n.length}，总条数：${i.data&&i.data.length}`)):(i=null,m.info(`个股数据${t}没有更新，代码 ${a}`))}}catch(e){throw m.error(`${a} 个股数据${t}更新时发生错误，${e}`),e}try{if(i&&i.data&&i.data.length>0){let e=JSON.stringify(i),n=u(t,a);m.debug(`保存个股${a}数据${t}到：${n}`),await S.writeFile(n,e,"utf-8")}}catch(e){throw new Error(`保存个股${a}数据${t}时出现错误，请检查后重新执行：${e}`)}}const j=[s.daily,s.adjustFactor,s.suspendInfo,s.dailyBasic,s.moneyFlow],F=[s.income,s.balanceSheet,s.cashFlow,s.forecast,s.express,s.financialIndicator,s.disclosureDate];async function E(t,a){let e=p();if(y.isEmpty(a))throw new Error(`没有设置查询${t}的个股代码`);m.info(`个股${a}获取和更新${t}数据 ...`);let i=await g.queryStockInfo(t,a),n={updateTime:e.toISOString(),data:i};m.info(`个股${a} 数据${t}更新，更新时间：${n.updateTime}, 总条数：${n.data&&n.data.length}`);try{if(n&&n.data&&n.data.length>0){let e=JSON.stringify(n),i=u(t,a);m.debug(`保存个股${a}数据${t}到：${i}`),await S.writeFile(i,e,"utf-8")}}catch(e){throw m.error(`保存个股${a}数据${t}错误：${e}`),new Error(`保存个股${a}数据${t}时出现错误，请检查后重新执行：${e}`)}}async function I(t,a){try{let e=JSON.stringify(t),i=$.join(c(),a);await S.writeFile(i,e,{encoding:"utf-8"})}catch(t){throw new Error("保存列表数据时出现错误，请检查后重新执行："+t)}}t.clearAllData=async function(){try{m.debug("检查根目录状态："),m.info("清理股票列表数据...");let t=$.join(c(),"stock-list.json");try{await S.access(t,b.constants.F_OK);try{await S.unlink(t)}catch(t){throw t}}catch(t){}m.info("清理股票列表数据完成"),m.info("清理指数列表数据...");let a=$.join(c(),"index-list.json");try{await S.access(a,b.constants.F_OK);try{await S.unlink(a)}catch(t){throw t}}catch(t){}m.info("清理指数列表数据完成"),m.info("清理股票历史数据...");let e=$.join(c(),l.daily);try{await S.access(e,b.constants.F_OK);try{let t=await S.readdir(e);m.info(`共有${t.length}个历史数据文件待删除`),t.forEach(async t=>{await S.unlink($.join(e,t))})}catch(t){throw t}}catch(t){}m.info("清理股票历史数据完成"),m.info("清理股票信息数据...");let i=$.join(c(),l.info);try{await S.access(i,b.constants.F_OK);try{let t=await S.readdir(i);m.info(`共有${t.length}个历史数据文件待删除`),t.forEach(async t=>{await S.unlink($.join(i,t))})}catch(t){throw t}}catch(t){}m.info("清理股票信息数据完成"),m.info("清理股票财务数据...");let n=$.join(c(),l.financial);try{await S.access(n,b.constants.F_OK);try{let t=await S.readdir(n);m.info(`共有${t.length}个历史数据文件待删除`),t.forEach(async t=>{await S.unlink($.join(n,t))})}catch(t){throw t}}catch(t){}m.info("清理股票财务数据完成")}catch(t){throw new Error("清除所有已经同步数据发生错误："+t)}},t.readStockData=f,t.readStockIndexList=async function(){let t=null;try{await h();let e=i.join(c(),"index-list.json");t=JSON.parse(await r.readFile(e,"utf-8")),a.isEmpty(t)||o.debug("指数列表更新时间 @"+t.updateTime)}catch(t){throw o.error("读取指数列表数据错误："+t),new Error("读取指数列表过程中出现错误，请检查后重新运行："+t)}return a.isEmpty(t)?{updateTime:"",data:[]}:t},t.readStockList=async function(){let t=null;try{await h();let e=i.join(c(),"stock-list.json");t=JSON.parse(await r.readFile(e,"utf-8")),a.isEmpty(t)||o.debug("股票列表更新时间 @"+t.updateTime)}catch(t){throw o.error("读取股票列表数据错误："+t),new Error("读取股票列表过程中出现错误，请检查后重新运行："+t)}return a.isEmpty(t)?{updateTime:"",data:[]}:t},t.stockDataNames=s,t.updateData=async function(t=!1,a=!1,e=!1,i=!1,n=!1,r=!1,o=!1){m.debug(`参数：强制更新 ${t}, 更新股票信息数据 ${a}, 更新股票财务数据 ${e}, 更新主营业务构成 ${i}, 更新分红送股 ${n}, 更新股权质押数据 ${r}，更新指数数据 ${o}`);let[l,c]=await async function(t){let a=p();m.info("获取和更新股票列表数据 ...");let e=await g.stockBasic(),i={updateTime:a.toISOString(),data:e};await I(i,"stock-list.json"),m.info("股票列表数据更新完毕！"),m.info("获取和更新指数列表数据 ...");let n={updateTime:a.toISOString(),data:[]},r=await Promise.all(g.indexMarketList.map(async t=>g.indexBasic(t.code)));r&&r.length>0&&r.forEach(t=>{if(t&&t.length>0){let a=t.length,e=(t=t.filter(t=>y.isEmpty(t.exp_date))).length;m.debug(`指数过滤，总共${a}, 剩余${e}`),n.data.push(...t)}});return await I(n,"index-list.json"),m.info("更新指数列表数据完成！"),[i,n]}();a&&await async function(t,a){let e=t&&t.data;if(e&&e.length>0){let t=[];m.info("个股信息数据更新准备...");for(let i=0;i<e.length;i++)for(let n=0;n<j.length;n++)t.push({caller:D,args:[j[n],e[i].ts_code,a]});if(m.info("个股信息数据更新准备完毕！"),t&&t.length>0){let a=w(t,30,"个股数据更新任务");try{m.debug("等待个股数据更新队列完成..."),await Promise.all(a),m.info(g.showInfo()),m.debug("个股数据更新队列全部执行完毕！")}catch(t){m.error("个股数据更新任务执行 错误！"+t)}}}}(l,t),e&&await async function(t,a){let e=t&&t.data;if(e&&e.length>0){let t=[];m.info("个股财务数据更新准备...");for(let i=0;i<e.length;i++)for(let n=0;n<F.length;n++)t.push({caller:D,args:[F[n],e[i].ts_code,a]});if(m.info("个股财务数据更新准备完毕！"),t&&t.length>0){let a=w(t,30,"个股财务数据任务");try{m.debug("等待个股财务数据更新队列完成..."),await Promise.all(a),m.info(g.showInfo()),m.debug("个股财务数据更新队列全部执行完毕！")}catch(t){m.error("个股财务数据更新任务执行 错误！"+t)}}}}(l,t),i&&await async function(t,a){let e=t&&t.data;if(e&&e.length>0){let t=[];m.info("个股主营业务数据更新准备...");for(let i=0;i<e.length;i++)t.push({caller:D,args:[s.financialMainbiz,e[i].ts_code,a]});if(m.info("个股主营业务数据更新准备完毕！"),t&&t.length>0){let a=w(t,30,"个股主营业务数据任务");try{m.debug("等待个股主营业务数据更新队列完成..."),await Promise.all(a),m.info(g.showInfo()),m.debug("个股主营业务数据更新队列全部执行完毕！")}catch(t){m.error("个股主营业务数据更新任务执行 错误！"+t)}}}}(l,t),n&&await async function(t){let a=t&&t.data;if(a&&a.length>0){let t=[];m.info("个股分红送股数据更新准备...");for(let e=0;e<a.length;e++)t.push({caller:E,args:[s.dividend,a[e].ts_code]});if(m.info("个股分红送股数据更新准备完毕！"),t&&t.length>0){let a=w(t,20,"个股分红送股数据任务");try{m.debug("等待个股分红送股数据更新队列完成..."),await Promise.all(a),m.info(g.showInfo()),m.debug("个股分红送股数据更新队列全部执行完毕！")}catch(t){m.error("个股分红送股数据更新任务执行 错误！"+t)}}}}(l),r&&await async function(t){let a=t&&t.data;if(a&&a.length>0){let t=[];m.info("个股股权质押数据更新准备...");for(let e=0;e<a.length;e++)t.push({caller:E,args:[s.pledgeStat,a[e].ts_code]}),t.push({caller:E,args:[s.pledgeDetail,a[e].ts_code]});if(m.info("个股股权质押数据更新准备完毕！"),t&&t.length>0){let a=w(t,20,"个股股权质押数据任务");try{m.debug("等待个股股权质押数据更新队列完成..."),await Promise.all(a),m.info(g.showInfo()),m.debug("个股股权质押数据更新队列全部执行完毕！")}catch(t){m.error("个股股权质押数据更新任务执行 错误！"+t)}}}}(l),o&&await async function(t,a){if(t&&t.data&&t.data.length>0){m.info("指数日线数据更新开始 ...");let e=t.data.map(t=>({caller:D,args:[s.indexDaily,t.ts_code,a]})),i=w(e,20,"指数日线更新任务");try{m.debug("等待指数日线更新队列完成 ..."),await Promise.all(i),m.debug("指数日线数据更新队列全部完成！")}catch(t){m.error("指数日线任务执行 错误：%o",t)}m.info(g.showInfo()),m.info("指数日线数据更新完毕！")}}(c,t)},t.updateStockInfoData=D,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=stockdata.js.map
