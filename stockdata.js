!function(t,a){"object"==typeof exports&&"undefined"!=typeof module?a(exports):"function"==typeof define&&define.amd?define(["exports"],a):a((t=t||self)["@wt/lib-wtda"]={})}(this,(function(t){"use strict";const{readStockList:a,readStockData:e,getDataRoot:n,getStockDataFile:i,DATA_PATH:r,STOCKLIST_FILE:o,INDEXLIST_FILE:l,stockDataNames:d}=require("@wt/lib-wtda-query"),c=require("lodash"),f=require("moment"),s=require("@wt/lib-taskqueue"),u=require("@wt/lib-tushare"),h=require("pino")({level:process.env.LOGGER||"info",prettyPrint:{levelFirst:!0,translateTime:"SYS:yyyy-mm-dd HH:MM:ss.l",crlf:!0},prettifier:require("pino-pretty")}),g=require("path"),$=require("fs"),w=$.promises,y={[d.dividend]:d.dividend,[d.pledgeStat]:d.pledgeStat,[d.pledgeDetail]:d.pledgeDetail};async function p(t,a,n=!1){if(y[t])return D(a);if(c.isEmpty(t)||!d[t])throw Error("请填写正确的个股数据名称！"+t);if(c.isEmpty(a))throw Error("请填写正确的股票代码！"+a);let i;try{if(n){h.debug("需要强制更新数据："+a);try{let[e,n,r]=await u.queryStockInfo(t,a);i={updateTime:f().toISOString(),startDate:r,endDate:n,data:e},h.info(`个股数据${t}强制更新，代码 ${a}, 更新时间：${i.updateTime}, 更新时间范围: ${r} - ${n}, 总条数：${i.data&&i.data.length}`)}catch(e){throw h.error(`强制更新个股${a}数据${t}时出现错误：${e}`),e}}else{i=await e(t,a),h.debug(`读取本地数据${a}.${t}：${i.updateTime}, ${i.startDate}, ${i.endDate}, ${i.data&&i.data.length}`);let n=null;if(i.data&&i.data.length>0){let e=i.endDate;n=f(e,"YYYYMMDD").add(1,"days").format("YYYYMMDD");let r=f();if(r.diff(n,"days")<=0&&r.hours()<15)return void h.info(`${a}没有新的数据${t}，不需要更新, 已有数据${i.data&&i.data.length}条`,i)}h.info(`${a}查询数据${t}，参数：${n}`);let[r,o,l]=await u.queryStockInfo(t,a,n);h.info(`${a}查询数据${t}，参数：${n}，返回：${r&&r.length}条，${o}, ${l}`),i&&!i.startDate&&(i.startDate=l),r&&r.length>0?(i.updateTime=f().toISOString(),i.endDate=o,i.data.unshift(...r),h.info(`个股数据${t}更新，代码 ${a}, 更新时间：${i.updateTime}, 更新时间范围: ${l} - ${o}, 更新条数：${r&&r.length}，总条数：${i.data&&i.data.length}`)):(i=null,h.info(`个股数据${t}没有更新，代码 ${a}`))}}catch(e){throw h.error(`${a} 个股数据${t}更新时发生错误，${e}`),e}await m(i,t,a)}async function m(t,a,e){try{if(t&&t.data&&t.data.length>0){let n=JSON.stringify(t),r=i(a,e);h.debug(`保存个股${e}数据${a}到：${r}`),await w.writeFile(r,n,"utf-8")}}catch(t){throw new Error(`保存个股${e}数据${a}时出现错误，请检查后重新执行：${t}`)}}const b=[d.daily,d.adjustFactor,d.suspendInfo,d.dailyBasic,d.moneyFlow],_=[d.income,d.balanceSheet,d.cashFlow,d.forecast,d.express,d.financialIndicator,d.disclosureDate];async function D(t,a){let e=f();if(c.isEmpty(a))throw new Error(`没有设置查询${t}的个股代码`);h.info(`个股${a}获取和更新${t}数据 ...`);let n=await u.queryStockInfo(t,a),r={updateTime:e.toISOString(),data:n};h.info(`个股${a} 数据${t}更新，更新时间：${r.updateTime}, 总条数：${r.data&&r.data.length}`);try{if(r&&r.data&&r.data.length>0){let e=JSON.stringify(r),n=i(t,a);h.debug(`保存个股${a}数据${t}到：${n}`),await w.writeFile(n,e,"utf-8")}}catch(e){throw h.error(`保存个股${a}数据${t}错误：${e}`),new Error(`保存个股${a}数据${t}时出现错误，请检查后重新执行：${e}`)}}async function S(t,a){try{let e=JSON.stringify(t),i=g.join(n(),a);await w.writeFile(i,e,{encoding:"utf-8"})}catch(t){throw new Error("保存列表数据时出现错误，请检查后重新执行："+t)}}async function j(t){if(c.isEmpty(t))return;let a=await e(d.daily,t);h.debug(`日线${t}读取到${a.data.length}条数据`);let n=await e(d.adjustFactor,t);h.debug(`复权因子${t}读取到${n.data.length}条数据`);let i=n&&n.data&&n.data.length>0?n.data[0].adj_factor:1;h.debug(`${t}最新复权因子: ${i}`),a&&a.data&&a.data.length>0&&(a.data=a.data.map(t=>{let a=n.data.filter(a=>a.trade_date===t.trade_date);return h.debug(t.trade_date+", 寻找到adj：%o",a),a&&a.length>0&&(t.adj_factor=a[0].adj_factor,t.prevadj_factor=a[0].adj_factor/i),t})),await m(a,d.daily,t),h.info(t+"日线数据合并完成！")}function E(t){let a=[];for(let e=1;e<t.length-1;e++){let n=t[e],i=null,r=a.length>0?a[a.length-1]:null,o=null!==r?r[2]:0;h.debug(`执行检查 序号：${e}， %o, 前一点 %o, 后一点 %o, 前2点 %o, 后2点 %o`,n,t[e-1],t[e+1],t[e-2],t[e+2]),(0===n[2]&&n[3]>=t[e-1][3]&&n[3]>=t[e+1][3]||1===n[2]&&e-2>=0&&e+2<t.length&&n[1]>=t[e-2][1]&&n[1]>=t[e+2][1])&&(i=[n[0],n[3],1,n[3],n[4]],h.debug(`找到高点，序号${e}, %o`,n),1===o&&(h.debug(`前一个点也是高点：, 当前序号${e}, 当前点：%o, 上一个点：%o`,i,r),r[1]<i[1]?(h.debug("当前点价格更高，替换前一个点！"),a[a.length-1]=i):h.debug("之前的高点比当前点高，忽略这次发现的高点"),i=null)),(0===n[2]&&n[4]<=t[e-1][4]&&n[4]<=t[e+1][4]||-1===n[2]&&e-2>=0&&e+2<t.length&&n[1]<=t[e-2][1]&&n[1]<=t[e+2][1])&&(i=[n[0],n[4],-1,n[3],n[4]],h.debug(`发现低点，序号${e}, %o`,n),-1===o&&(h.debug(`前一个点也是低点，当前序号${e}, 当前点：%o, 上一个点：%o`,i,r),r[1]>i[1]?(h.debug("当前点比上一个点价格更低，替换上一个点！"),a[a.length-1]=i):h.debug("当前点比上一个点价格高，忽略这次发现的低点！"),i=null)),null!==i&&a.push(i)}return a}async function F(t){if(c.isEmpty(t))return;let a=await e(d.daily,t);!function(t,a=3){t&&t.data&&t.data.length>0&&t.data.forEach(t=>{t.prevadj_factor&&(t.open=Number((t.open*t.prevadj_factor).toFixed(a)),t.close=Number((t.close*t.prevadj_factor).toFixed(a)),t.high=Number((t.high*t.prevadj_factor).toFixed(a)),t.low=Number((t.low*t.prevadj_factor).toFixed(a)),t.pre_close=Number((t.pre_close*t.prevadj_factor).toFixed(a)),t.change=Number((t.change*t.prevadj_factor).toFixed(a)))})}(a),h.debug("去除内移交易日..., "+(a&&a.data&&a.data.length));let n=function(t){let a=[];if(!t||!Array.isArray(t))return a;if(t.length<=0)return a;let e=t.length-1,n=t[e],i=e-1;for(;i>=0;){let r=t[i];if(r){if(r.high<=n.high&&r.low>=n.low);else{let t=[r.trade_date,null,0,r.high,r.low];a.push(t),e=i,n=r}i-=1}}return a}(a.data),r=[];for(let t=0;t<3;t++)n=E(n),r[t]=n,h.debug(`趋势等级: ${t}, 趋势点数量 ${r[t].length}`);h.info(t+"趋势数据计算完毕！");try{h.info(`保存数据信息：${t}, 日期 ${a&&a.startDate} ～ ${a&&a.endDate}, 日线数据${a&&a.data.length}条，短期${r[0].length}, 中期 ${r[1].length}, 长期 ${r[2].length}`);let e={updateTime:f().toISOString(),tsCode:t,startDate:a.startDate,endDate:a.endDate,data:a.data,trends:r},n="trend",o=JSON.stringify(e),l=i(n,t);await w.writeFile(l,o,"utf-8"),h.info(`个股${t}趋势数据保存：${l}, 短期：${r&&r[0].length}，中期：${r&&r[1].length}，长期：${r&&r[2].length}`)}catch(a){throw new Error(`保存个股${t}趋势数据时出现错误，请检查后重新执行：${a}`)}a.data=null,a=null,n=null}t.calculateAllDailyData=async function(){let t=await a();if(!t||!t.data)return void h.error("没有读取到股票列表，无法处理日线数据");let e=t.data.map(t=>({caller:j,args:[t.ts_code]}));if(e&&e.length>0){let t=s(e,30,"日线数据合并");try{await Promise.all(t)}catch(t){h.error("日线数据合并任务执行发生未知异常："+t)}}},t.calculateAllTrendPoints=async function(){h.info("内存使用：%o",process.memoryUsage());let t=await a();if(!t||!t.data)return void h.error("没有读取到股票列表，无法处理日线数据");h.info("内存使用：%o",process.memoryUsage());let e=t.data.map(t=>({caller:F,args:[t.ts_code]}));if(h.info("内存使用：%o",process.memoryUsage()),e&&e.length>0){let t=s(e,20,"趋势数据计算");try{await Promise.all(t)}catch(t){h.error("趋势数据合并任务执行发生未知异常："+t)}t=null}h.info("趋势数据全部计算完毕！"),h.info("内存使用：%o",process.memoryUsage())},t.calculateDailyData=j,t.calculateTrendPoints=F,t.clearAllData=async function(){try{h.debug("检查根目录状态："),h.info("清理股票列表数据...");let t=g.join(n(),o);try{await w.access(t,$.constants.F_OK);try{await w.unlink(t)}catch(t){throw t}}catch(t){}h.info("清理股票列表数据完成"),h.info("清理指数列表数据...");let a=g.join(n(),l);try{await w.access(a,$.constants.F_OK);try{await w.unlink(a)}catch(t){throw t}}catch(t){}h.info("清理指数列表数据完成"),h.info("清理股票历史数据...");let e=g.join(n(),r.daily);try{await w.access(e,$.constants.F_OK);try{let t=await w.readdir(e);h.info(`共有${t.length}个历史数据文件待删除`),t.forEach(async t=>{await w.unlink(g.join(e,t))})}catch(t){throw t}}catch(t){}h.info("清理股票历史数据完成"),h.info("清理股票信息数据...");let i=g.join(n(),r.info);try{await w.access(i,$.constants.F_OK);try{let t=await w.readdir(i);h.info(`共有${t.length}个历史数据文件待删除`),t.forEach(async t=>{await w.unlink(g.join(i,t))})}catch(t){throw t}}catch(t){}h.info("清理股票信息数据完成"),h.info("清理股票财务数据...");let d=g.join(n(),r.financial);try{await w.access(d,$.constants.F_OK);try{let t=await w.readdir(d);h.info(`共有${t.length}个历史数据文件待删除`),t.forEach(async t=>{await w.unlink(g.join(d,t))})}catch(t){throw t}}catch(t){}h.info("清理股票财务数据完成")}catch(t){throw new Error("清除所有已经同步数据发生错误："+t)}},t.stockDataNames=d,t.updateData=async function(t=!1,a=!1,e=!1,n=!1,i=!1,r=!1,g=!1){h.debug(`参数：强制更新 ${t}, 更新股票信息数据 ${a}, 更新股票财务数据 ${e}, 更新主营业务构成 ${n}, 更新分红送股 ${i}, 更新股权质押数据 ${r}，更新指数数据 ${g}`);let[$,w]=await async function(t){let a=f();h.info("获取和更新股票列表数据 ...");let e=await u.stockBasic(),n={updateTime:a.toISOString(),data:e};await S(n,o),h.info("股票列表数据更新完毕！"),h.info("获取和更新指数列表数据 ...");let i={updateTime:a.toISOString(),data:[]},r=await Promise.all(u.indexMarketList.map(async t=>u.indexBasic(t.code)));r&&r.length>0&&r.forEach(t=>{if(t&&t.length>0){let a=t.length,e=(t=t.filter(t=>c.isEmpty(t.exp_date))).length;h.debug(`指数过滤，总共${a}, 剩余${e}`),i.data.push(...t)}});return await S(i,l),h.info("更新指数列表数据完成！"),[n,i]}();a&&await async function(t,a){let e=t&&t.data;if(e&&e.length>0){let t=[];h.info("个股信息数据更新准备...");for(let n=0;n<e.length;n++)for(let i=0;i<b.length;i++)t.push({caller:p,args:[b[i],e[n].ts_code,a]});if(h.info("个股信息数据更新准备完毕！"),t&&t.length>0){let a=s(t,30,"个股数据更新任务");try{h.debug("等待个股数据更新队列完成..."),await Promise.all(a),h.info(u.showInfo()),h.debug("个股数据更新队列全部执行完毕！")}catch(t){h.error("个股数据更新任务执行 错误！"+t)}}}}($,t),e&&await async function(t,a){let e=t&&t.data;if(e&&e.length>0){let t=[];h.info("个股财务数据更新准备...");for(let n=0;n<e.length;n++)for(let i=0;i<_.length;i++)t.push({caller:p,args:[_[i],e[n].ts_code,a]});if(h.info("个股财务数据更新准备完毕！"),t&&t.length>0){let a=s(t,30,"个股财务数据任务");try{h.debug("等待个股财务数据更新队列完成..."),await Promise.all(a),h.info(u.showInfo()),h.debug("个股财务数据更新队列全部执行完毕！")}catch(t){h.error("个股财务数据更新任务执行 错误！"+t)}}}}($,t),n&&await async function(t,a){let e=t&&t.data;if(e&&e.length>0){let t=[];h.info("个股主营业务数据更新准备...");for(let n=0;n<e.length;n++)t.push({caller:p,args:[d.financialMainbiz,e[n].ts_code,a]});if(h.info("个股主营业务数据更新准备完毕！"),t&&t.length>0){let a=s(t,30,"个股主营业务数据任务");try{h.debug("等待个股主营业务数据更新队列完成..."),await Promise.all(a),h.info(u.showInfo()),h.debug("个股主营业务数据更新队列全部执行完毕！")}catch(t){h.error("个股主营业务数据更新任务执行 错误！"+t)}}}}($,t),i&&await async function(t){let a=t&&t.data;if(a&&a.length>0){let t=[];h.info("个股分红送股数据更新准备...");for(let e=0;e<a.length;e++)t.push({caller:D,args:[d.dividend,a[e].ts_code]});if(h.info("个股分红送股数据更新准备完毕！"),t&&t.length>0){let a=s(t,20,"个股分红送股数据任务");try{h.debug("等待个股分红送股数据更新队列完成..."),await Promise.all(a),h.info(u.showInfo()),h.debug("个股分红送股数据更新队列全部执行完毕！")}catch(t){h.error("个股分红送股数据更新任务执行 错误！"+t)}}}}($),r&&await async function(t){let a=t&&t.data;if(a&&a.length>0){let t=[];h.info("个股股权质押数据更新准备...");for(let e=0;e<a.length;e++)t.push({caller:D,args:[d.pledgeStat,a[e].ts_code]}),t.push({caller:D,args:[d.pledgeDetail,a[e].ts_code]});if(h.info("个股股权质押数据更新准备完毕！"),t&&t.length>0){let a=s(t,20,"个股股权质押数据任务");try{h.debug("等待个股股权质押数据更新队列完成..."),await Promise.all(a),h.info(u.showInfo()),h.debug("个股股权质押数据更新队列全部执行完毕！")}catch(t){h.error("个股股权质押数据更新任务执行 错误！"+t)}}}}($),g&&await async function(t,a){if(t&&t.data&&t.data.length>0){h.info("指数日线数据更新开始 ...");let e=t.data.map(t=>({caller:p,args:[d.indexDaily,t.ts_code,a]})),n=s(e,20,"指数日线更新任务");try{h.debug("等待指数日线更新队列完成 ..."),await Promise.all(n),h.debug("指数日线数据更新队列全部完成！")}catch(t){h.error("指数日线任务执行 错误：%o",t)}h.info(u.showInfo()),h.info("指数日线数据更新完毕！")}}(w,t)},t.updateStockInfoData=p,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=stockdata.js.map
