!function(t,a){"object"==typeof exports&&"undefined"!=typeof module?a(exports):"function"==typeof define&&define.amd?define(["exports"],a):a((t=t||self)["@wt/lib-wtda"]={})}(this,(function(t){"use strict";const a=require("lodash"),e=require("os"),i=require("path"),r=require("fs"),n=r.promises,o=require("pino")({prettyPrint:{levelFirst:!0,translateTime:"SYS:standard",crlf:!0},prettifier:require("pino-pretty")});process.env.LOGGER&&(o.level=process.env.LOGGER);function s(){return i.join(e.homedir(),".wtda")}async function l(t){if(a.isEmpty(t))throw new Error("未设置读取股票代码");let e={updateTime:null,data:[]};try{await c();let a=i.join(s(),"daily",t+".json");try{e=JSON.parse(await n.readFile(a,"utf-8"))}catch(t){e={data:[]}}}catch(t){o.error("从本地读取日线数据时发生错误 "+t)}return e}async function c(){let t=s();try{await n.access(t,r.constants.F_OK|r.constants.R_OK|r.constants.W_OK)}catch(a){o.debug("检查数据根目录错误 "+a),await n.mkdir(t,{recursive:!0})}let a=i.join(t,"daily");try{await n.access(a,r.constants.F_OK|r.constants.R_OK|r.constants.W_OK)}catch(t){o.debug("检查日线历史目录错误 "+t),await n.mkdir(a,{recursive:!0})}}const d=require("lodash"),u=require("moment"),f=require("@wt/lib-taskqueue"),y=require("@wt/lib-tushare"),h=require("pino")({prettyPrint:{levelFirst:!0,translateTime:"SYS:standard",crlf:!0},prettifier:require("pino-pretty")});process.env.LOGGER&&(h.level=process.env.LOGGER);const w=require("path"),p=require("fs"),g=p.promises;async function m(t,a=!1,e="S"){if(d.isEmpty(t))return{data:[]};if("S"!==e&&"I"!==e)return{data:[]};let i;try{if(a){let a;h.debug("force update "+t),a="S"===e?await y.stockDaily(t):await y.indexDaily(t),i={updateTime:u().toISOString(),data:a},h.info(`日线数据强制更新，代码 ${t}, 更新时间：${i.updateTime}, 总条数：${i.data&&i.data.length}`)}else{i=await l(t);let a,r="";if(i.data&&i.data.length>0){let a=i.data[0].trade_date;r=u(a,"YYYYMMDD").add(1,"days").format("YYYYMMDD");let e=u();if(e.diff(r,"days")<=0&&e.hours()<15)return void h.log("没有新的数据，不需要更新 "+t)}a="S"===e?await y.stockDaily(t,r):await y.indexDaily(t,r),a&&a.length>0?(i.updateTime=u().toISOString(),i.data.unshift(...a),h.info(`日线数据更新，代码 ${t}, 更新时间：${i.updateTime}, 更新条数：${a&&a.length}，总条数：${i.data&&i.data.length}`)):(i=null,h.info("日线数据没有更新，代码 "+t))}}catch(a){throw h.error(`${t} 日线数据更新时发生错误，${a}`),a}try{if(i){await c();let a=JSON.stringify(i),e=w.join(s(),"daily",t+".json");await g.writeFile(e,a,"utf-8")}}catch(a){throw new Error("保存日线历史数据时出现错误，请检查后重新执行："+t+","+a)}}async function j(t,e=!1){if(d.isEmpty(t))return{data:[]};let r;try{if(e)h.debug("force update "+t),r=await y.adjustFactor(t),h.info(`股票复权因子数据强制更新，代码 ${t}, 总条数：${r.data&&r.length}`);else{r=await async function(t){if(a.isEmpty(t))throw new Error("未设置读取股票代码");let e=[];try{await c();let a=i.join(s(),"daily",t+".adj.json");try{e=JSON.parse(await n.readFile(a,"utf-8"))}catch(t){o.debug(`读取股票复权因子文件${a} 错误：${t}`),e=[]}}catch(t){o.error("从本地读取日线复权因子数据时发生错误 "+t)}return e}(t);let e="";if(r&&r.length>0){let a=r[0].trade_date;e=u(a,"YYYYMMDD").add(1,"days").format("YYYYMMDD");let i=u();if(i.diff(e,"days")<=0&&i.hours()<15)return void h.debug("没有新的复权因子数据，不需要更新 "+t)}let l=await y.adjustFactor(t,e);h.debug(`${t} 复权因子数据返回：${r&&r.length}`),l&&l.length>0?(r.unshift(...l),h.info(`日线复权因子数据更新，代码 ${t}, 更新条数：${l&&l.length}，总条数：${r&&r.length}`)):(r=null,h.info("日线复权因子数据没有更新，代码 "+t))}}catch(a){throw h.error(`${t} 日线复权因子数据更新时发生错误，${a}`),a}try{if(r&&r.length>0){let a=JSON.stringify(r),e=w.join(s(),"daily",t+".adj.json");await g.writeFile(e,a,"utf-8")}}catch(a){throw new Error("保存复权因子数据时出现错误，请检查后重新执行："+t+","+a)}}async function S(t,a){try{await c();let e=JSON.stringify(t),i=w.join(s(),a);await g.writeFile(i,e,{encoding:"utf-8"})}catch(t){throw new Error("保存列表数据时出现错误，请检查后重新执行："+t)}}t.clearAllData=async function(){try{h.debug("检查根目录状态："),await c(),h.info("清理股票列表数据...");let t=w.join(s(),"stock-list.json");try{await g.access(t,p.constants.F_OK);try{await g.unlink(t)}catch(t){throw t}}catch(t){}h.info("清理股票列表数据完成"),h.info("清理指数列表数据...");let a=w.join(s(),"index-list.json");try{await g.access(a,p.constants.F_OK);try{await g.unlink(a)}catch(t){throw t}}catch(t){}h.info("清理指数列表数据完成"),h.info("清理股票历史数据...");let e=w.join(s(),"daily");try{await g.access(e,p.constants.F_OK);try{let t=await g.readdir(e);h.info(`共有${t.length}个历史数据文件待删除`),t.forEach(async t=>{await g.unlink(w.join(e,t))})}catch(t){throw t}}catch(t){}h.info("清理股票历史数据完成")}catch(t){throw new Error("清除所有已经同步数据发生错误："+t)}},t.readStockDaily=l,t.readStockIndexList=async function(){let t=null;try{await c();let e=i.join(s(),"index-list.json");t=JSON.parse(await n.readFile(e,"utf-8")),a.isEmpty(t)||o.debug("指数列表更新时间 @"+t.updateTime)}catch(t){throw o.error("读取指数列表数据错误："+t),new Error("读取指数列表过程中出现错误，请检查后重新运行："+t)}return a.isEmpty(t)?{updateTime:"",data:[]}:t},t.readStockList=async function(){let t=null;try{await c();let e=i.join(s(),"stock-list.json");t=JSON.parse(await n.readFile(e,"utf-8")),a.isEmpty(t)||o.debug("股票列表更新时间 @"+t.updateTime)}catch(t){throw o.error("读取股票列表数据错误："+t),new Error("读取股票列表过程中出现错误，请检查后重新运行："+t)}return a.isEmpty(t)?{updateTime:"",data:[]}:t},t.updateAdjustFactorData=j,t.updateDailyData=m,t.updateData=async function(t=!1,a=!1,e=!1,i=!1,r=!1){let n=u();h.info("获取和更新股票列表数据 ..."),h.debug(`参数：强制更新 ${t}, 全部更新 ${r}，更新股票日线 ${a}, 更新指数日线 ${i}`);let o=await y.stockBasic(),s={updateTime:n.toISOString(),data:o};await S(s,"stock-list.json"),h.info("股票列表数据更新完毕！"),h.info("获取和更新指数列表数据 ...");let l={updateTime:n.toISOString(),data:[]},c=await Promise.all(y.indexMarketList.map(async t=>y.indexBasic(t.code)));if(c&&c.length>0&&c.forEach(t=>{if(t&&t.length>0){let a=t.length,e=(t=t.filter(t=>d.isEmpty(t.exp_date))).length;h.debug(`指数过滤，总共${a}, 剩余${e}`),l.data.push(...t)}}),await S(l,"index-list.json"),h.info("更新指数列表数据完成！"),r||a){if(h.info("开始更新股票日线数据..."),d.isArray(o)&&o.length>0){let a=o.map(a=>({caller:m,args:[a.ts_code,t,"S"]})),e=f(a,20,"股票日线更新任务");try{h.debug("等待股票日线更新队列完成..."),await Promise.all(e),h.debug("股票日线更新队列全部执行完毕！")}catch(t){h.error("股票日线任务执行 错误！"+t)}}h.info(y.showInfo()),h.info("股票日线数据更新完毕!")}if(r||e){if(h.info("开始更新股票复权因子数据..."),d.isArray(o)&&o.length>0){let a=o.map(a=>({caller:j,args:[a.ts_code,t]})),e=f(a,20,"股票复权因子更新任务");try{h.debug("等待股票日线复权因子更新队列完成..."),await Promise.all(e),h.debug("股票日线复权因子更新队列全部执行完毕！")}catch(t){h.error("股票日线复权因子任务执行 错误！"+t)}}h.info(y.showInfo()),h.info("股票复权因子数据更新完毕!")}if((r||i)&&(h.info("指数日线数据更新开始 ..."),d.isArray(l.data)&&l.data.length>0)){let a=l.data.map(a=>({caller:m,args:[a.ts_code,t,"I"]})),e=f(a,20,"指数日线更新任务");try{h.debug("等待指数日线更新队列完成 ..."),await Promise.all(e),h.debug("指数日线数据更新队列全部完成！")}catch(t){h.error("指数日线任务执行 错误：%o",t)}h.info(y.showInfo()),h.info("指数日线收护具更新完毕！")}},Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=stockdata.js.map
