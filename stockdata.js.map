{"version":3,"file":"stockdata.js","sources":["src/stockdata-query.js","src/stockdata-update.js"],"sourcesContent":["/**\n * TODO:\n * 1. 数据结构（对应到本地或远程存储结构）\n * 本地数据以json格式保存，\n *\n *\n * 股票数据访问层，主要用于计算和一些处理\n * 1. 后续会将数据的远程访问，本地访问在这里集成\n * 2.\n */\n\nconst _ = require(\"lodash\");\n\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst fp = fs.promises;\n\nconst pino = require(\"pino\");\n\nconst logger = pino({\n    level: process.env.LOGGER || \"info\",\n    prettyPrint: {\n        levelFirst: true,\n        translateTime: \"SYS:yyyy-mm-dd HH:MM:ss.l\",\n        crlf: true,\n    },\n    prettifier: require(\"pino-pretty\"),\n});\n\nconst DATA_PATH_ROOT = \".wtda\";\nconst DATA_PATH = {\n    daily: \"daily\",\n    info: \"info\",\n    financial: \"fin\",\n};\nconst STOCKLIST_FILE = \"stock-list.json\";\nconst INDEXLIST_FILE = \"index-list.json\";\n\nfunction getDataRoot() {\n    return path.join(os.homedir(), DATA_PATH_ROOT);\n}\n\n/**\n * 读取目前可用的完整股票列表返回，返回数据为对象\n * {\n *    info: {\n *      updateTime,\n *      ...\n *    }\n *    data: stockList[]\n * }\n *\n * stockList: [{\n *    ts_code,\n *    symbol,\n *    name,\n *    area,\n *    industry,\n *    fullname,\n *    enname,\n *    market,\n *    exchange,\n *    curr_type,\n *    list_status,\n *    delist_date,\n *    is_hs\n * }]\n *\n */\nasync function readStockList() {\n    let retData = null;\n    try {\n        await checkDataPath();\n\n        // 首先从目录中读取对应的列表文件，然后根据文件当中的信息决定是否需要更新\n        let stockListPath = path.join(getDataRoot(), STOCKLIST_FILE);\n        retData = JSON.parse(await fp.readFile(stockListPath, \"utf-8\"));\n        if (!_.isEmpty(retData)) {\n            logger.debug(`股票列表更新时间 @${retData.updateTime}`);\n        }\n    } catch (error) {\n        logger.error(`读取股票列表数据错误：${error}`);\n        throw new Error(\n            \"读取股票列表过程中出现错误，请检查后重新运行：\" + error\n        );\n        // retData = null\n    }\n\n    if (_.isEmpty(retData)) {\n        // 读取数据不存在\n        return {\n            updateTime: \"\",\n            data: [],\n        };\n    }\n    return retData;\n}\n\nasync function readStockIndexList() {\n    let retData = null;\n    try {\n        await checkDataPath();\n\n        // 首先从目录中读取对应的列表文件，然后根据文件当中的信息决定是否需要更新\n        let stockIndexListPath = path.join(getDataRoot(), INDEXLIST_FILE);\n        retData = JSON.parse(await fp.readFile(stockIndexListPath, \"utf-8\"));\n        if (!_.isEmpty(retData)) {\n            logger.debug(`指数列表更新时间 @${retData.updateTime}`);\n        }\n    } catch (error) {\n        logger.error(`读取指数列表数据错误：${error}`);\n        throw new Error(\n            \"读取指数列表过程中出现错误，请检查后重新运行：\" + error\n        );\n        // retData = null\n    }\n\n    if (_.isEmpty(retData)) {\n        // 读取数据不存在\n        return {\n            updateTime: \"\",\n            data: [],\n        };\n    }\n    return retData;\n}\n\nconst stockDataNames = {\n    // 日数据\n    daily: \"daily\",\n    // 复权因子\n    adjustFactor: \"adjustFactor\",\n    // 停复牌信息\n    suspendInfo: \"suspendInfo\",\n    // 基本面信息\n    dailyBasic: \"dailyBasic\",\n    // 个股资金流向\n    moneyFlow: \"moneyFlow\",\n    // // 指数\n    // indexDailyBasic: \"indexDailyBasic\",\n    // 指数日线\n    indexDaily: \"indexDaily\",\n    // 利润表\n    income: \"income\",\n    // 负债表\n    balanceSheet: \"balanceSheet\",\n    // 现金流\n    cashFlow: \"cashFlow\",\n    // 业绩预告\n    forecast: \"forecast\",\n    // 业绩快报\n    express: \"express\",\n    // 分红送股\n    dividend: \"dividend\",\n    // 财务指标数据\n    financialIndicator: \"financialIndicator\",\n    // 主营业务构成\n    financialMainbiz: \"financialMainbiz\",\n    // 财报披露日期\n    disclosureDate: \"disclosureDate\",\n    // 股权质押统计\n    pledgeStat: \"pledgeStat\",\n    // 股权质押明细\n    pledgeDetail: \"pledgeDetail\",\n};\n\nconst stockDataParams = {\n    // 日数据\n    daily: { name: \"daily\", path: DATA_PATH.daily, ext: \"\" },\n    // 复权因子\n    adjustFactor: { name: \"adjustFactor\", path: DATA_PATH.daily, ext: \".adj\" },\n    // 停复牌信息\n    suspendInfo: { name: \"suspendInfo\", path: DATA_PATH.info, ext: \".sus\" },\n    // 基本面信息\n    dailyBasic: { name: \"dailyBasic\", path: DATA_PATH.info, ext: \".bsc\" },\n    // 个股资金流向\n    moneyFlow: { name: \"moneyFlow\", path: DATA_PATH.info, ext: \".mf\" },\n    // // 指数\n    // indexDailyBasic: \"indexDailyBasic\",\n    // 指数日线\n    indexDaily: { name: \"indexDaily\", path: DATA_PATH.daily, ext: \"\" },\n    // 利润表\n    income: { name: \"income\", path: DATA_PATH.financial, ext: \".ic\" },\n    // 负债表\n    balanceSheet: {\n        name: \"balanceSheet\",\n        path: DATA_PATH.financial,\n        ext: \".bs\",\n    },\n    // 现金流\n    cashFlow: { name: \"cashFlow\", path: DATA_PATH.financial, ext: \".cf\" },\n    // 业绩预告\n    forecast: { name: \"forecast\", path: DATA_PATH.financial, ext: \".fc\" },\n    // 业绩快报\n    express: { name: \"express\", path: DATA_PATH.financial, ext: \".ep\" },\n    // 分红送股，这个数据不能使用通用方式\n    dividend: { name: \"dividend\", path: DATA_PATH.financial, ext: \".dd\" },\n    // 财务指标数据\n    financialIndicator: {\n        name: \"financialIndicator\",\n        path: DATA_PATH.financial,\n        ext: \".id\",\n    },\n    // 主营业务构成\n    financialMainbiz: {\n        name: \"financialMainbiz\",\n        path: DATA_PATH.financial,\n        ext: \".mb\",\n    },\n    // 财报披露日期\n    disclosureDate: {\n        name: \"disclosureDate\",\n        path: DATA_PATH.financial,\n        ext: \".dt\",\n    },\n    // 股权质押统计\n    pledgeStat: { name: \"pledgeStat\", path: DATA_PATH.financial, ext: \".ps\" },\n    // 股权质押明细\n    pledgeDetail: {\n        name: \"pledgeDetail\",\n        path: DATA_PATH.financial,\n        ext: \".pd\",\n    },\n    trend: {\n        name: \"trend\",\n        path: DATA_PATH.daily,\n        ext: \".tr\",\n    },\n};\n\nasync function readStockData(dataName, tsCode) {\n    if (!stockDataNames[dataName]) {\n        throw new Error(\"不支持的数据类型：\" + dataName);\n    }\n    if (_.isEmpty(tsCode)) {\n        throw new Error(\"未设置读取股票代码\");\n    }\n    let retData = {\n        updateTime: null,\n        data: [],\n        // 下面考虑放个字段说明\n    };\n\n    let params = stockDataParams[dataName];\n    try {\n        await checkDataPath();\n\n        let dataFile = getStockDataFile(dataName, tsCode);\n        logger.debug(\n            `读取本地数据 ${tsCode}.${dataName}，参数配置 %o，文件 ${dataFile}`,\n            params\n        );\n        try {\n            retData = JSON.parse(await fp.readFile(dataFile, \"utf-8\"));\n        } catch (error) {\n            // 文件不存在，不考虑其它错误\n            logger.debug(`读取文件时发生错误：${error}`);\n            retData = { data: [] };\n        }\n    } catch (error) {\n        logger.error(`从本地读取个股数据${dataName}时发生错误 ${error}`);\n    }\n    return retData;\n}\n\nfunction getStockDataFile(dataName, tsCode) {\n    // logger.debug(`计算文件名：${dataName}, ${tsCode}`);\n    let params = stockDataParams[dataName];\n    // logger.debug(\"获取参数：%o\", params);\n    if (!params) {\n        throw new Error(\"不支持的数据类型\" + dataName);\n    }\n    if (_.isEmpty(tsCode)) {\n        throw new Error(\"未设置读取股票代码\");\n    }\n    return path.join(getDataRoot(), params.path, tsCode + params.ext + \".json\");\n}\n\nasync function checkDataPath() {\n    let dataPath = getDataRoot();\n\n    // 做基础的目录访问检查\n    try {\n        await fp.access(\n            dataPath,\n            fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK\n        );\n    } catch (error) {\n        logger.debug(`检查数据根目录错误 ${error}`);\n        await fp.mkdir(dataPath, { recursive: true });\n    }\n\n    for (let key of Object.keys(DATA_PATH)) {\n        let tmpPath = path.join(dataPath, DATA_PATH[key]);\n        try {\n            await fp.access(\n                tmpPath,\n                fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK\n            );\n        } catch (error) {\n            logger.debug(`检查目录${DATA_PATH[key]}错误 ${error}`);\n            await fp.mkdir(tmpPath, { recursive: true });\n        }\n    }\n}\n\ncheckDataPath();\n\nexport {\n    readStockData,\n    readStockList,\n    readStockIndexList,\n    getDataRoot,\n    getStockDataFile,\n    DATA_PATH,\n    STOCKLIST_FILE,\n    INDEXLIST_FILE,\n    stockDataNames,\n};\n","/**\n * 股票数据获取和更新\n * 1. 后续会将数据的远程访问，本地访问在这里集成\n * 2.\n */\n\nconst _ = require(\"lodash\");\nconst moment = require(\"moment\");\nconst executeTasks = require(\"@wt/lib-taskqueue\");\nconst tushare = require(\"@wt/lib-tushare\");\n\nconst pino = require(\"pino\");\n\nconst logger = pino({\n    level: process.env.LOGGER || \"info\",\n    prettyPrint: {\n        levelFirst: true,\n        translateTime: \"SYS:yyyy-mm-dd HH:MM:ss.l\",\n        crlf: true,\n    },\n    prettifier: require(\"pino-pretty\"),\n});\n\nimport {\n    readStockList,\n    readStockData,\n    getDataRoot,\n    getStockDataFile,\n    DATA_PATH,\n    STOCKLIST_FILE,\n    INDEXLIST_FILE,\n    stockDataNames,\n} from \"./stockdata-query\";\n\n// const os = require(\"os\")\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst fp = fs.promises;\n\nconst stockInfo2Names = {\n    [stockDataNames.dividend]: stockDataNames.dividend,\n    [stockDataNames.pledgeStat]: stockDataNames.pledgeStat,\n    [stockDataNames.pledgeDetail]: stockDataNames.pledgeDetail,\n};\n\n/**\n * 更新个股信息数据，包括个股的日数据，基本面，复权因子，财务相关的各种数据；\n *\n * @param {string} dataName 数据名称\n * @param {string} tsCode 股票代码\n * @param {boolean} force 是否强制全部更新\n */\nasync function updateStockInfoData(dataName, tsCode, force = false) {\n    // logger.log(\"更新日线：\", tsCode, force)\n\n    // dividend 比较特殊，单独调用\n    if (stockInfo2Names[dataName]) {\n        return updateStockInfo2Data(tsCode);\n    }\n\n    if (_.isEmpty(dataName) || !stockDataNames[dataName]) {\n        throw Error(\"请填写正确的个股数据名称！\" + dataName);\n    }\n    if (_.isEmpty(tsCode)) {\n        throw Error(`请填写正确的股票代码！${tsCode}`);\n    }\n\n    let stockData;\n    try {\n        if (force) {\n            logger.debug(`需要强制更新数据：${tsCode}`);\n            try {\n                let [data, endDate, startDate] = await tushare.queryStockInfo(\n                    dataName,\n                    tsCode\n                );\n\n                stockData = {\n                    updateTime: moment().toISOString(),\n                    startDate,\n                    endDate,\n                    data,\n                };\n                logger.info(\n                    `个股数据${dataName}强制更新，代码 ${tsCode}, 更新时间：${\n                        stockData.updateTime\n                    }, 更新时间范围: ${startDate} - ${endDate}, 总条数：${\n                        stockData.data && stockData.data.length\n                    }`\n                );\n            } catch (error) {\n                logger.error(\n                    `强制更新个股${tsCode}数据${dataName}时出现错误：${error}`\n                );\n                throw error;\n            }\n        } else {\n            stockData = await readStockData(dataName, tsCode);\n\n            logger.debug(\n                `读取本地数据${tsCode}.${dataName}：${stockData.updateTime}, ${\n                    stockData.startDate\n                }, ${stockData.endDate}, ${\n                    stockData.data && stockData.data.length\n                }`\n            );\n            let startDate = \"\";\n            if (stockData.data && stockData.data.length > 0) {\n                let lastDate = stockData.endDate;\n                startDate = moment(lastDate, \"YYYYMMDD\")\n                    .add(1, \"days\")\n                    .format(\"YYYYMMDD\");\n                let now = moment();\n                if (now.diff(startDate, \"days\") <= 0 && now.hours() < 15) {\n                    // 还没有最新一天的数据，不需要\n                    logger.log(`没有新的数据，不需要更新 ${tsCode}`);\n                    return;\n                }\n            }\n\n            let [\n                newData,\n                endDate,\n                queryStartDate,\n            ] = await tushare.queryStockInfo(dataName, tsCode, startDate);\n\n            // 如果通过查询获得的数据不存在，需要更新一下startDate\n            if (stockData && !stockData.startDate) {\n                stockData.startDate = queryStartDate;\n            }\n\n            if (newData && newData.length > 0) {\n                stockData.updateTime = moment().toISOString();\n                //stockData.startDate = startDate;\n                stockData.endDate = endDate;\n                stockData.data.unshift(...newData);\n                logger.info(\n                    `个股数据${dataName}更新，代码 ${tsCode}, 更新时间：${\n                        stockData.updateTime\n                    }, 更新时间范围: ${queryStartDate} - ${endDate}, 更新条数：${\n                        newData && newData.length\n                    }，总条数：${stockData.data && stockData.data.length}`\n                );\n            } else {\n                stockData = null;\n                logger.info(`个股数据${dataName}没有更新，代码 ${tsCode}`);\n            }\n        }\n    } catch (error) {\n        logger.error(`${tsCode} 个股数据${dataName}更新时发生错误，${error}`);\n        throw error;\n    }\n\n    await saveStockDataFile(stockData, dataName, tsCode);\n}\n\nasync function saveStockDataFile(stockData, dataName, tsCode) {\n    try {\n        if (stockData && stockData.data && stockData.data.length > 0) {\n            // await checkDataPath();\n            let jsonStr = JSON.stringify(stockData);\n            let stockDataFile = getStockDataFile(dataName, tsCode);\n            logger.debug(\n                `保存个股${tsCode}数据${dataName}到：${stockDataFile}`\n            );\n            await fp.writeFile(stockDataFile, jsonStr, \"utf-8\");\n        }\n    } catch (error) {\n        throw new Error(\n            `保存个股${tsCode}数据${dataName}时出现错误，请检查后重新执行：${error}`\n        );\n    }\n}\n\n/**\n * 数据更新，如果force为true，则需要将所有数据更新为最新（相当于全部重新读取）\n * @param {boolean} force 强制更新所有数据，表示忽略本地数据，重新获取全部历史数据\n * @param {boolean} updateStock 是否更新个股日线数据，默认不更新\n * @param {boolean} updateFinance 是否更新个股财务数据，默认不更新\n * @param {boolean} updateIndex 是否更新指数信息，默认不更新\n */\nasync function updateData(\n    force = false,\n    updateStock = false,\n    updateFinance = false,\n    updateMainbiz = false,\n    updateDividend = false,\n    updatePledge = false,\n    updateIndex = false\n) {\n    logger.debug(\n        `参数：强制更新 ${force}, 更新股票信息数据 ${updateStock}, 更新股票财务数据 ${updateFinance}, 更新主营业务构成 ${updateMainbiz}, 更新分红送股 ${updateDividend}, 更新股权质押数据 ${updatePledge}，更新指数数据 ${updateIndex}`\n    );\n    // 首先读取和保存股票列表数据\n    let [stockList, indexList] = await updateListData(force);\n\n    if (updateStock) {\n        await readAndUpdateStockListInfoData(stockList, force);\n    }\n\n    if (updateFinance) {\n        await readAndUpdateStockListFinancialData(stockList, force);\n    }\n\n    if (updateMainbiz) {\n        await readAndUpdateStockListMainbizData(stockList, force);\n    }\n\n    if (updateDividend) {\n        await readAndUpdateStockListDividendData(stockList);\n    }\n\n    if (updatePledge) {\n        await readAndUpdateStockListPledgeData(stockList);\n    }\n\n    if (updateIndex) {\n        await readAndUpdateIndexListInfoData(indexList, force);\n    }\n}\n\nasync function readAndUpdateIndexListInfoData(indexList, force) {\n    if (indexList && indexList.data && indexList.data.length > 0) {\n        // if (all || includeIndex) {\n        logger.info(\"指数日线数据更新开始 ...\");\n        // if (_.isArray(indexList.data) && indexList.data.length > 0) {\n        let tasks = indexList.data.map((data) => {\n            return {\n                caller: updateStockInfoData,\n                args: [stockDataNames.indexDaily, data.ts_code, force],\n            };\n        });\n        let workers = executeTasks(tasks, 20, \"指数日线更新任务\");\n        try {\n            logger.debug(\"等待指数日线更新队列完成 ...\");\n            await Promise.all(workers);\n            logger.debug(\"指数日线数据更新队列全部完成！\");\n        } catch (error) {\n            logger.error(`指数日线任务执行 错误：%o`, error);\n        }\n        // }\n        logger.info(tushare.showInfo());\n        logger.info(\"指数日线数据更新完毕！\");\n    }\n}\n\nconst stockListInfoApiNames = [\n    stockDataNames.daily,\n    stockDataNames.adjustFactor,\n    stockDataNames.suspendInfo,\n    stockDataNames.dailyBasic,\n    stockDataNames.moneyFlow,\n];\n\nconst stockListFinancialApiNames = [\n    stockDataNames.income,\n    stockDataNames.balanceSheet,\n    stockDataNames.cashFlow,\n    stockDataNames.forecast,\n    stockDataNames.express,\n    // stockDataNames.dividend,\n    stockDataNames.financialIndicator,\n    // stockDataNames.financialMainbiz,\n    stockDataNames.disclosureDate,\n];\n\n/**\n * 读取并更新个股的财务数据\n * @param {Array} stockList 个股列表\n * @param {boolean} force 是否强制更新\n */\nasync function readAndUpdateStockListFinancialData(stockList, force) {\n    let stockBasicData = stockList && stockList.data;\n    if (stockBasicData && stockBasicData.length > 0) {\n        let tasks = [];\n        logger.info(\"个股财务数据更新准备...\");\n        for (let i = 0; i < stockBasicData.length; i++) {\n            for (let j = 0; j < stockListFinancialApiNames.length; j++) {\n                tasks.push({\n                    caller: updateStockInfoData,\n                    args: [\n                        stockListFinancialApiNames[j],\n                        stockBasicData[i].ts_code,\n                        force,\n                    ],\n                });\n            }\n        }\n        logger.info(\"个股财务数据更新准备完毕！\");\n\n        if (tasks && tasks.length > 0) {\n            let workers = executeTasks(tasks, 30, \"个股财务数据任务\");\n            try {\n                logger.debug(\"等待个股财务数据更新队列完成...\");\n                await Promise.all(workers);\n                logger.info(tushare.showInfo());\n                logger.debug(\"个股财务数据更新队列全部执行完毕！\");\n            } catch (error) {\n                logger.error(`个股财务数据更新任务执行 错误！${error}`);\n            }\n        }\n    }\n}\n\n/**\n * 读取并更新个股主营业务数据，这个数据接口流量限制较大，因此单独更新\n * @param {Array} stockList 个股列表\n * @param {boolean}} force 是否强制更新\n */\nasync function readAndUpdateStockListMainbizData(stockList, force) {\n    let stockBasicData = stockList && stockList.data;\n    if (stockBasicData && stockBasicData.length > 0) {\n        let tasks = [];\n        logger.info(\"个股主营业务数据更新准备...\");\n        for (let i = 0; i < stockBasicData.length; i++) {\n            tasks.push({\n                caller: updateStockInfoData,\n                args: [\n                    stockDataNames.financialMainbiz,\n                    stockBasicData[i].ts_code,\n                    force,\n                ],\n            });\n        }\n        logger.info(\"个股主营业务数据更新准备完毕！\");\n\n        if (tasks && tasks.length > 0) {\n            let workers = executeTasks(tasks, 30, \"个股主营业务数据任务\");\n            try {\n                logger.debug(\"等待个股主营业务数据更新队列完成...\");\n                await Promise.all(workers);\n                logger.info(tushare.showInfo());\n                logger.debug(\"个股主营业务数据更新队列全部执行完毕！\");\n            } catch (error) {\n                logger.error(`个股主营业务数据更新任务执行 错误！${error}`);\n            }\n        }\n    }\n}\n\nasync function readAndUpdateStockListDividendData(stockList) {\n    let stockBasicData = stockList && stockList.data;\n    if (stockBasicData && stockBasicData.length > 0) {\n        let tasks = [];\n        logger.info(\"个股分红送股数据更新准备...\");\n        for (let i = 0; i < stockBasicData.length; i++) {\n            tasks.push({\n                caller: updateStockInfo2Data,\n                args: [stockDataNames.dividend, stockBasicData[i].ts_code],\n            });\n        }\n        logger.info(\"个股分红送股数据更新准备完毕！\");\n\n        if (tasks && tasks.length > 0) {\n            let workers = executeTasks(tasks, 20, \"个股分红送股数据任务\");\n            try {\n                logger.debug(\"等待个股分红送股数据更新队列完成...\");\n                await Promise.all(workers);\n                logger.info(tushare.showInfo());\n                logger.debug(\"个股分红送股数据更新队列全部执行完毕！\");\n            } catch (error) {\n                logger.error(`个股分红送股数据更新任务执行 错误！${error}`);\n            }\n        }\n    }\n}\n\nasync function readAndUpdateStockListPledgeData(stockList) {\n    let stockBasicData = stockList && stockList.data;\n    if (stockBasicData && stockBasicData.length > 0) {\n        let tasks = [];\n        logger.info(\"个股股权质押数据更新准备...\");\n        for (let i = 0; i < stockBasicData.length; i++) {\n            tasks.push({\n                caller: updateStockInfo2Data,\n                args: [stockDataNames.pledgeStat, stockBasicData[i].ts_code],\n            });\n            tasks.push({\n                caller: updateStockInfo2Data,\n                args: [stockDataNames.pledgeDetail, stockBasicData[i].ts_code],\n            });\n        }\n        logger.info(\"个股股权质押数据更新准备完毕！\");\n\n        if (tasks && tasks.length > 0) {\n            let workers = executeTasks(tasks, 20, \"个股股权质押数据任务\");\n            try {\n                logger.debug(\"等待个股股权质押数据更新队列完成...\");\n                await Promise.all(workers);\n                logger.info(tushare.showInfo());\n                logger.debug(\"个股股权质押数据更新队列全部执行完毕！\");\n            } catch (error) {\n                logger.error(`个股股权质押数据更新任务执行 错误！${error}`);\n            }\n        }\n    }\n}\n\n/**\n * 读取并更新个股信息数据\n * @param {Array} stockList 个股列表\n * @param {boolean} force 是否强制更新\n */\nasync function readAndUpdateStockListInfoData(stockList, force) {\n    let stockBasicData = stockList && stockList.data;\n    if (stockBasicData && stockBasicData.length > 0) {\n        let totalStockWorkers = [];\n        logger.info(\"个股信息数据更新准备...\");\n        for (let i = 0; i < stockBasicData.length; i++) {\n            for (let j = 0; j < stockListInfoApiNames.length; j++) {\n                totalStockWorkers.push({\n                    caller: updateStockInfoData,\n                    args: [\n                        stockListInfoApiNames[j],\n                        stockBasicData[i].ts_code,\n                        force,\n                    ],\n                });\n            }\n        }\n        logger.info(\"个股信息数据更新准备完毕！\");\n        if (totalStockWorkers && totalStockWorkers.length > 0) {\n            let workers = executeTasks(\n                totalStockWorkers,\n                30,\n                \"个股数据更新任务\"\n            );\n            try {\n                logger.debug(\"等待个股数据更新队列完成...\");\n                await Promise.all(workers);\n                logger.info(tushare.showInfo());\n                logger.debug(\"个股数据更新队列全部执行完毕！\");\n            } catch (error) {\n                logger.error(`个股数据更新任务执行 错误！${error}`);\n            }\n        }\n    }\n}\n\n/**\n * 更新股票和指数列表信息\n * @param {boolean} force 是否强制更新\n */\nasync function updateListData(force) {\n    let now = moment();\n    // let endDate = now.format(\"YYYYMMDD\")\n\n    logger.info(\"获取和更新股票列表数据 ...\");\n    // 首先更新股票列表数据\n    let stockBasicData = await tushare.stockBasic();\n\n    let stockList = {\n        updateTime: now.toISOString(),\n        data: stockBasicData,\n    };\n    await saveListFile(stockList, STOCKLIST_FILE);\n    logger.info(\"股票列表数据更新完毕！\");\n\n    logger.info(\"获取和更新指数列表数据 ...\");\n    // 更新股票指数列表数据\n    let indexList = {\n        updateTime: now.toISOString(),\n        data: [],\n    };\n\n    let allIndexData = await Promise.all(\n        tushare.indexMarketList.map(async (market) => {\n            return tushare.indexBasic(market.code);\n        })\n    );\n\n    // logger.debug(\"所有指数请求返回！\", allIndexData && allIndexData.length)\n    if (allIndexData && allIndexData.length > 0) {\n        allIndexData.forEach((data) => {\n            // logger.debug(\"指数数据：\", data && data.length)\n            if (data && data.length > 0) {\n                // 合并之前做一次数据检查，对于已经终止的指数进行过滤\n                let total = data.length;\n                data = data.filter((item) => {\n                    return _.isEmpty(item.exp_date);\n                });\n                let filteredTotal = data.length;\n                logger.debug(`指数过滤，总共${total}, 剩余${filteredTotal}`);\n                indexList.data.push(...data);\n            }\n        });\n    }\n    // logger.debug(\"保存指数数据！\")\n    await saveListFile(indexList, INDEXLIST_FILE);\n    logger.info(\"更新指数列表数据完成！\");\n\n    return [stockList, indexList];\n}\n\nasync function updateStockInfo2Data(dataName, tsCode) {\n    let now = moment();\n\n    if (_.isEmpty(tsCode)) {\n        throw new Error(`没有设置查询${dataName}的个股代码`);\n    }\n\n    logger.info(`个股${tsCode}获取和更新${dataName}数据 ...`);\n    // 首先更新股票列表数据\n    let data = await tushare.queryStockInfo(dataName, tsCode);\n    let stockData = {\n        updateTime: now.toISOString(),\n        data,\n    };\n    logger.info(\n        `个股${tsCode} 数据${dataName}更新，更新时间：${\n            stockData.updateTime\n        }, 总条数：${stockData.data && stockData.data.length}`\n    );\n\n    try {\n        if (stockData && stockData.data && stockData.data.length > 0) {\n            let jsonStr = JSON.stringify(stockData);\n            let stockDataFile = getStockDataFile(dataName, tsCode);\n            logger.debug(\n                `保存个股${tsCode}数据${dataName}到：${stockDataFile}`\n            );\n            await fp.writeFile(stockDataFile, jsonStr, \"utf-8\");\n        }\n    } catch (error) {\n        logger.error(`保存个股${tsCode}数据${dataName}错误：${error}`);\n        throw new Error(\n            `保存个股${tsCode}数据${dataName}时出现错误，请检查后重新执行：${error}`\n        );\n    }\n}\n\n/**\n * 保存列表数据到指定文件\n * @param {object} data 列表数据\n * @param {string} fileName 文件名\n */\nasync function saveListFile(data, fileName) {\n    try {\n        // await checkDataPath();\n\n        let jsonStr = JSON.stringify(data);\n        let listPath = path.join(getDataRoot(), fileName);\n\n        await fp.writeFile(listPath, jsonStr, { encoding: \"utf-8\" });\n    } catch (error) {\n        throw new Error(\"保存列表数据时出现错误，请检查后重新执行：\" + error);\n    }\n}\n\n/**\n * 清除所有已经同步的数据\n */\nasync function clearAllData() {\n    try {\n        logger.debug(\"检查根目录状态：\");\n        // await checkDataPath();\n\n        // 首先删除股票列表信息文件\n        logger.info(\"清理股票列表数据...\");\n        let stockListPath = path.join(getDataRoot(), STOCKLIST_FILE);\n        try {\n            await fp.access(stockListPath, fs.constants.F_OK);\n            try {\n                await fp.unlink(stockListPath);\n            } catch (error) {\n                throw error;\n            }\n        } catch (error) {\n            // 文件不存在，直接忽略\n        }\n        logger.info(\"清理股票列表数据完成\");\n\n        logger.info(\"清理指数列表数据...\");\n        let indexListPath = path.join(getDataRoot(), INDEXLIST_FILE);\n        try {\n            await fp.access(indexListPath, fs.constants.F_OK);\n            try {\n                await fp.unlink(indexListPath);\n            } catch (error) {\n                throw error;\n            }\n        } catch (error) {\n            // 文件不存在，直接忽略\n        }\n        logger.info(\"清理指数列表数据完成\");\n\n        logger.info(\"清理股票历史数据...\");\n        // 下面删除股票历史数据目录\n        let stockDailyHistoryPath = path.join(getDataRoot(), DATA_PATH.daily);\n        try {\n            await fp.access(stockDailyHistoryPath, fs.constants.F_OK);\n\n            try {\n                let fileList = await fp.readdir(stockDailyHistoryPath);\n                logger.info(`共有${fileList.length}个历史数据文件待删除`);\n                fileList.forEach(async (filePath) => {\n                    // logger.log(\"to be remove: \", filePath)\n                    await fp.unlink(path.join(stockDailyHistoryPath, filePath));\n                });\n            } catch (error) {\n                throw error;\n            }\n        } catch (error) {\n            // 没有目录\n        }\n        logger.info(\"清理股票历史数据完成\");\n\n        logger.info(\"清理股票信息数据...\");\n        // 下面删除股票历史数据目录\n        let stockInfoPath = path.join(getDataRoot(), DATA_PATH.info);\n        try {\n            await fp.access(stockInfoPath, fs.constants.F_OK);\n\n            try {\n                let fileList = await fp.readdir(stockInfoPath);\n                logger.info(`共有${fileList.length}个历史数据文件待删除`);\n                fileList.forEach(async (filePath) => {\n                    // logger.log(\"to be remove: \", filePath)\n                    await fp.unlink(path.join(stockInfoPath, filePath));\n                });\n            } catch (error) {\n                throw error;\n            }\n        } catch (error) {\n            // 没有目录\n        }\n        logger.info(\"清理股票信息数据完成\");\n\n        logger.info(\"清理股票财务数据...\");\n        // 下面删除股票历史数据目录\n        let stockFinPath = path.join(getDataRoot(), DATA_PATH.financial);\n        try {\n            await fp.access(stockFinPath, fs.constants.F_OK);\n\n            try {\n                let fileList = await fp.readdir(stockFinPath);\n                logger.info(`共有${fileList.length}个历史数据文件待删除`);\n                fileList.forEach(async (filePath) => {\n                    // logger.log(\"to be remove: \", filePath)\n                    await fp.unlink(path.join(stockFinPath, filePath));\n                });\n            } catch (error) {\n                throw error;\n            }\n        } catch (error) {\n            // 没有目录\n        }\n        logger.info(\"清理股票财务数据完成\");\n    } catch (error) {\n        throw new Error(\"清除所有已经同步数据发生错误：\" + error);\n    }\n}\n\n/**\n * 根据股票列表和当前原始日线及复权因子数据合并完整的日线数据\n */\nasync function calculateAllDailyData() {\n    let stockList = await readStockList();\n    if (!stockList || !stockList.data) {\n        logger.error(`没有读取到股票列表，无法处理日线数据`);\n        return;\n    }\n\n    let dailyDataTasks = stockList.data.map((data) => {\n        return {\n            caller: calculateDailyData,\n            args: [data.ts_code],\n        };\n    });\n\n    if (dailyDataTasks && dailyDataTasks.length > 0) {\n        let workers = executeTasks(dailyDataTasks, 30, \"日线数据合并\");\n        try {\n            await Promise.all(workers);\n        } catch (error) {\n            logger.error(`日线数据合并任务执行发生未知异常：${error}`);\n        }\n    }\n}\n\nasync function calculateDailyData(tsCode) {\n    if (_.isEmpty(tsCode)) return;\n    let dailyData = await readStockData(stockDataNames.daily, tsCode);\n    logger.debug(`日线${tsCode}读取到${dailyData.data.length}条数据`);\n    let adjData = await readStockData(stockDataNames.adjustFactor, tsCode);\n    logger.debug(`复权因子${tsCode}读取到${adjData.data.length}条数据`);\n\n    let latestAdj =\n        adjData && adjData.data && adjData.data.length > 0\n            ? adjData.data[0].adj_factor\n            : 1;\n    logger.debug(`${tsCode}最新复权因子: ${latestAdj}`);\n\n    if (dailyData && dailyData.data && dailyData.data.length > 0) {\n        dailyData.data = dailyData.data.map((daily) => {\n            // 日线数据中需要放入对应日期的复权因子和前复权因子=复权因子/最新复权因子\n            let dates = adjData.data.filter((adj) => {\n                return adj.trade_date === daily.trade_date;\n            });\n            logger.debug(`${daily.trade_date}, 寻找到adj：%o`, dates);\n            if (dates && dates.length > 0) {\n                daily.adj_factor = dates[0].adj_factor;\n                daily.prevadj_factor = dates[0].adj_factor / latestAdj;\n            }\n            return daily;\n        });\n    }\n\n    await saveStockDataFile(dailyData, stockDataNames.daily, tsCode);\n    logger.info(`${tsCode}日线数据合并完成！`);\n}\n\n// 这里的data数据应该是原始数据\n// 这里要求的数据顺序是按照日期降序的，即0放的是最新的时间\nfunction removeIncludedData(data) {\n    let ret = [];\n    if (!(data && Array.isArray(data))) return ret;\n    if (data.length <= 0) return ret;\n\n    let index = data.length - 1;\n    let item = data[index];\n\n    let currentIndex = index - 1;\n    while (currentIndex >= 0) {\n        let currentItem = data[currentIndex];\n        if (currentItem) {\n            if (currentItem.high <= item.high && currentItem.low >= item.low) {\n                // 内移日 这一天数据去除，也不需要和后续比较\n            } else {\n                // 非内移日\n                let tmp = [currentItem.trade_date, null, 0, currentItem];\n                ret.push(tmp);\n                index = currentIndex;\n                item = currentItem;\n            }\n            currentIndex = currentIndex - 1;\n        }\n    }\n    return ret;\n}\n\n/**\n * 从当前日线数据序列中计算下一级趋势点\n * 如果是第一级查找，则需要已经做好内移日去除\n * @param {Array} data 日线数据，去除内移日的原始日线数据或者某一级趋势点数据\n */\nfunction calculateNextTrendPoints(data) {\n    let findPoints = [];\n    // let nextType = 0\n    // 这里考虑使用forEach是否并行过多？\n    //data.forEach((item, index, array) => {\n    for (let index = 2; index < data.length - 2; index++) {\n        let item = data[index];\n        //if (index <= 1 || index >= array.length - 2) return;\n        let tmp = null;\n        let lastPoint =\n            findPoints.length > 0 ? findPoints[findPoints.length - 1] : null;\n        let lastType = lastPoint !== null ? lastPoint[2] : 0;\n        // findPoints.length > 0 ? findPoints[findPoints.length - 1][2] : 0\n\n        if (\n            (item[2] === 0 &&\n                item[3].high >= data[index - 1][3].high &&\n                item[3].high >= data[index + 1][3].high) ||\n            (item[2] === 1 &&\n                item[1] >= data[index - 2][1] &&\n                item[1] >= data[index + 2][1])\n        ) {\n            // 发现高点\n            tmp = [item[0], item[3].high, 1, item[3]];\n            logger.debug(`找到高点，序号${index}, %o`, item);\n            if (lastType === 1) {\n                logger.debug(\n                    `前一个点也是高点：, 当前序号${index}, 当前点：%o, 上一个点：%o`,\n                    tmp,\n                    lastPoint\n                );\n                if (lastPoint[1] < tmp[1]) {\n                    // 之前的高点比当前高点低，说明中间没有低点，替换之前的高点\n                    logger.debug(\"当前点价格更高，替换前一个点！\");\n                    findPoints[findPoints.length - 1] = tmp;\n                } else {\n                    logger.debug(\"之前的高点比当前点高，忽略这次发现的高点\");\n                }\n                tmp = null;\n            }\n        }\n        if (\n            (item[2] === 0 &&\n                item[3].low <= data[index - 1][3].low &&\n                item[3].low <= data[index + 1][3].low) ||\n            (item[2] === -1 &&\n                item[1] <= data[index - 2][1] &&\n                item[1] <= data[index + 2][1])\n        ) {\n            // 发现低点\n            tmp = [item[0], item[3].low, -1, item[3]];\n            logger.debug(`发现低点，序号${index}, %o`, item);\n            if (lastType === -1) {\n                logger.debug(\n                    `前一个点也是低点，当前序号${index}, 当前点：%o, 上一个点：%o`,\n                    tmp,\n                    lastPoint\n                );\n                if (lastPoint[1] > tmp[1]) {\n                    logger.debug(\"当前点比上一个点价格更低，替换上一个点！\");\n                    findPoints[findPoints.length - 1] = tmp;\n                } else {\n                    logger.debug(\n                        \"当前点比上一个点价格高，忽略这次发现的低点！\"\n                    );\n                }\n                tmp = null;\n            }\n        }\n        if (tmp !== null) {\n            //logger.debug(\"push trend point:\", tmp);\n            findPoints.push(tmp);\n        }\n    }\n    return findPoints;\n}\n\n/**\n * 根据当前数据计算日短期趋势\n * data输入为原始数据，在做短期高点和低点前，先去除内移交易日\n */\nasync function calculateTrendPoints(tsCode) {\n    if (_.isEmpty(tsCode)) return;\n    let dailyData = await readStockData(stockDataNames.daily, tsCode);\n\n    logger.debug(\n        `去除内移交易日..., ${\n            dailyData && dailyData.data && dailyData.data.length\n        }`\n    );\n    let indata = removeIncludedData(dailyData.data);\n    dailyData.data = null;\n    dailyData = null;\n    let trendPoints = [];\n\n    // 从基础数据循环3次，分别获得短期，中期和长期趋势\n    for (let i = 0; i < 3; i++) {\n        indata = calculateNextTrendPoints(indata);\n        trendPoints[i] = indata;\n        logger.debug(`趋势等级: ${i}, 趋势点数量 ${trendPoints[i].length}`);\n    }\n\n    logger.info(`${tsCode}趋势数据计算完毕！`);\n\n    try {\n        let stockData = {\n            updateTime: moment().toISOString(),\n            ts_code: tsCode,\n            data: trendPoints,\n        };\n        let dataName = \"trend\";\n\n        // if (stockData && stockData.data && stockData.data.length > 0) {\n        // await checkDataPath();\n        let jsonStr = JSON.stringify(stockData);\n        let stockDataFile = getStockDataFile(dataName, tsCode);\n        await fp.writeFile(stockDataFile, jsonStr, \"utf-8\");\n        // }\n        logger.info(\n            `个股${tsCode}趋势数据保存：${stockDataFile}, 短期：${\n                trendPoints && trendPoints[0].length\n            }，中期：${trendPoints && trendPoints[1].length}，长期：${\n                trendPoints && trendPoints[2].length\n            }`\n        );\n    } catch (error) {\n        throw new Error(\n            `保存个股${tsCode}数据${dataName}时出现错误，请检查后重新执行：${error}`\n        );\n    }\n    indata = null;\n\n    // return trendPoints;\n}\n\n/**\n * TODO: 需要使用前复权方式计算趋势点，目前的计算用的原始数据，对于实际股票交易盈亏而言不正确\n */\nasync function calculateAllTrendPoints() {\n    logger.info(\"内存使用：%o\", process.memoryUsage());\n    let stockList = await readStockList();\n    if (!stockList || !stockList.data) {\n        logger.error(`没有读取到股票列表，无法处理日线数据`);\n        return;\n    }\n\n    logger.info(\"内存使用：%o\", process.memoryUsage());\n    let dailyDataTasks = stockList.data.map((data) => {\n        return {\n            caller: calculateTrendPoints,\n            args: [data.ts_code],\n        };\n    });\n\n    logger.info(\"内存使用：%o\", process.memoryUsage());\n    if (dailyDataTasks && dailyDataTasks.length > 0) {\n        let workers = executeTasks(dailyDataTasks, 20, \"趋势数据计算\");\n        try {\n            await Promise.all(workers);\n        } catch (error) {\n            logger.error(`趋势数据合并任务执行发生未知异常：${error}`);\n        }\n        workers = null;\n    }\n    logger.info(`趋势数据全部计算完毕！`);\n    logger.info(\"内存使用：%o\", process.memoryUsage());\n}\n\nexport {\n    clearAllData,\n    updateData,\n    updateStockInfoData,\n    // updateStockDividendData,\n    calculateAllDailyData,\n    calculateDailyData,\n    calculateAllTrendPoints,\n    calculateTrendPoints,\n    stockDataNames,\n};\n"],"names":["_","require","os","path","fs","fp","promises","logger","pino","level","process","env","LOGGER","prettyPrint","levelFirst","translateTime","crlf","prettifier","DATA_PATH","daily","info","financial","getDataRoot","join","homedir","async","readStockList","retData","checkDataPath","stockListPath","JSON","parse","readFile","isEmpty","debug","updateTime","error","Error","data","stockDataNames","adjustFactor","suspendInfo","dailyBasic","moneyFlow","indexDaily","income","balanceSheet","cashFlow","forecast","express","dividend","financialIndicator","financialMainbiz","disclosureDate","pledgeStat","pledgeDetail","stockDataParams","name","ext","trend","readStockData","dataName","tsCode","params","dataFile","getStockDataFile","dataPath","access","constants","F_OK","R_OK","W_OK","mkdir","recursive","key","Object","keys","tmpPath","moment","executeTasks","tushare","stockInfo2Names","updateStockInfoData","force","updateStockInfo2Data","stockData","endDate","startDate","queryStockInfo","toISOString","length","lastDate","add","format","now","diff","hours","log","newData","queryStartDate","unshift","saveStockDataFile","jsonStr","stringify","stockDataFile","writeFile","stockListInfoApiNames","stockListFinancialApiNames","saveListFile","fileName","listPath","encoding","calculateDailyData","dailyData","adjData","latestAdj","adj_factor","map","dates","filter","adj","trade_date","prevadj_factor","calculateNextTrendPoints","findPoints","index","item","tmp","lastPoint","lastType","high","low","push","calculateTrendPoints","indata","ret","Array","isArray","currentIndex","currentItem","removeIncludedData","trendPoints","i","ts_code","stockList","dailyDataTasks","caller","args","workers","Promise","all","memoryUsage","unlink","indexListPath","stockDailyHistoryPath","fileList","readdir","forEach","filePath","stockInfoPath","stockFinPath","stockIndexListPath","updateStock","updateFinance","updateMainbiz","updateDividend","updatePledge","updateIndex","indexList","stockBasicData","stockBasic","allIndexData","indexMarketList","indexBasic","market","code","total","filteredTotal","exp_date","updateListData","totalStockWorkers","j","showInfo","readAndUpdateStockListInfoData","tasks","readAndUpdateStockListFinancialData","readAndUpdateStockListMainbizData","readAndUpdateStockListDividendData","readAndUpdateStockListPledgeData","readAndUpdateIndexListInfoData"],"mappings":"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"}