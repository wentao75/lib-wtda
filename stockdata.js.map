{"version":3,"file":"stockdata.js","sources":["src/stockdata-query.js","src/stockdata-update.js"],"sourcesContent":["/**\n * TODO:\n * 1. 数据结构（对应到本地或远程存储结构）\n *\n *\n * 股票数据访问层，主要用于计算和一些处理\n * 1. 后续会将数据的远程访问，本地访问在这里集成\n * 2.\n */\n\nconst _ = require(\"lodash\");\n\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst fp = fs.promises;\n\nconst pino = require(\"pino\");\n\nconst logger = pino({\n    level: process.env.LOGGER || \"info\",\n    prettyPrint: {\n        levelFirst: true,\n        translateTime: \"SYS:yyyy-mm-dd HH:MM:ss.l\",\n        crlf: true,\n    },\n    prettifier: require(\"pino-pretty\"),\n});\n\nconst DATA_PATH_ROOT = \".wtda\";\nconst DATA_PATH = {\n    daily: \"daily\",\n    info: \"info\",\n    financial: \"fin\",\n};\n\n// const DAILYHISTORY_PATH = \"daily\";\n// const INFO_PATH = \"info\";\nconst STOCKLIST_FILE = \"stock-list.json\";\nconst INDEXLIST_FILE = \"index-list.json\";\n\nfunction getDataRoot() {\n    return path.join(os.homedir(), DATA_PATH_ROOT);\n}\n\n/**\n * 读取目前可用的完整股票列表返回，返回数据为对象\n * {\n *    info: {\n *      updateTime,\n *      ...\n *    }\n *    data: stockList[]\n * }\n *\n * stockList: [{\n *    ts_code,\n *    symbol,\n *    name,\n *    area,\n *    industry,\n *    fullname,\n *    enname,\n *    market,\n *    exchange,\n *    curr_type,\n *    list_status,\n *    delist_date,\n *    is_hs\n * }]\n *\n */\nasync function readStockList() {\n    let retData = null;\n    try {\n        await checkDataPath();\n\n        // 首先从目录中读取对应的列表文件，然后根据文件当中的信息决定是否需要更新\n        let stockListPath = path.join(getDataRoot(), STOCKLIST_FILE);\n        retData = JSON.parse(await fp.readFile(stockListPath, \"utf-8\"));\n        if (!_.isEmpty(retData)) {\n            logger.debug(`股票列表更新时间 @${retData.updateTime}`);\n        }\n    } catch (error) {\n        logger.error(`读取股票列表数据错误：${error}`);\n        throw new Error(\n            \"读取股票列表过程中出现错误，请检查后重新运行：\" + error\n        );\n        // retData = null\n    }\n\n    if (_.isEmpty(retData)) {\n        // 读取数据不存在\n        return {\n            updateTime: \"\",\n            data: [],\n        };\n    }\n    return retData;\n}\n\nasync function readStockIndexList() {\n    let retData = null;\n    try {\n        await checkDataPath();\n\n        // 首先从目录中读取对应的列表文件，然后根据文件当中的信息决定是否需要更新\n        let stockIndexListPath = path.join(getDataRoot(), INDEXLIST_FILE);\n        retData = JSON.parse(await fp.readFile(stockIndexListPath, \"utf-8\"));\n        if (!_.isEmpty(retData)) {\n            logger.debug(`指数列表更新时间 @${retData.updateTime}`);\n        }\n    } catch (error) {\n        logger.error(`读取指数列表数据错误：${error}`);\n        throw new Error(\n            \"读取指数列表过程中出现错误，请检查后重新运行：\" + error\n        );\n        // retData = null\n    }\n\n    if (_.isEmpty(retData)) {\n        // 读取数据不存在\n        return {\n            updateTime: \"\",\n            data: [],\n        };\n    }\n    return retData;\n}\n\nconst stockDataNames = {\n    // 日数据\n    daily: \"daily\",\n    // 复权因子\n    adjustFactor: \"adjustFactor\",\n    // 停复牌信息\n    suspendInfo: \"suspendInfo\",\n    // 基本面信息\n    dailyBasic: \"dailyBasic\",\n    // 个股资金流向\n    moneyFlow: \"moneyFlow\",\n    // // 指数\n    // indexDailyBasic: \"indexDailyBasic\",\n    // 指数日线\n    indexDaily: \"indexDaily\",\n    // 利润表\n    income: \"income\",\n    // 负债表\n    balanceSheet: \"balanceSheet\",\n    // 现金流\n    cashFlow: \"cashFlow\",\n    // 业绩预告\n    forecast: \"forecast\",\n    // 业绩快报\n    express: \"express\",\n    // 分红送股\n    dividend: \"dividend\",\n    // 财务指标数据\n    financialIndicator: \"financialIndicator\",\n    // 主营业务构成\n    financialMainbiz: \"financialMainbiz\",\n    // 财报披露日期\n    disclosureDate: \"disclosureDate\",\n};\n\nconst stockDataParams = {\n    // 日数据\n    daily: { name: \"daily\", path: DATA_PATH.daily, ext: \"\" },\n    // 复权因子\n    adjustFactor: { name: \"adjustFactor\", path: DATA_PATH.daily, ext: \".adj\" },\n    // 停复牌信息\n    suspendInfo: { name: \"suspendInfo\", path: DATA_PATH.info, ext: \".sus\" },\n    // 基本面信息\n    dailyBasic: { name: \"dailyBasic\", path: DATA_PATH.info, ext: \".bsc\" },\n    // 个股资金流向\n    moneyFlow: { name: \"moneyFlow\", path: DATA_PATH.info, ext: \".mf\" },\n    // // 指数\n    // indexDailyBasic: \"indexDailyBasic\",\n    // 指数日线\n    indexDaily: { name: \"indexDaily\", path: DATA_PATH.daily, ext: \"\" },\n    // 利润表\n    income: { name: \"income\", path: DATA_PATH.financial, ext: \".ic\" },\n    // 负债表\n    balanceSheet: {\n        name: \"balanceSheet\",\n        path: DATA_PATH.financial,\n        ext: \".bs\",\n    },\n    // 现金流\n    cashFlow: { name: \"cashFlow\", path: DATA_PATH.financial, ext: \".cf\" },\n    // 业绩预告\n    forecast: { name: \"forecast\", path: DATA_PATH.financial, ext: \".fc\" },\n    // 业绩快报\n    express: { name: \"express\", path: DATA_PATH.financial, ext: \".ep\" },\n    // 分红送股\n    dividend: { name: \"dividend\", path: DATA_PATH.financial, ext: \".dd\" },\n    // 财务指标数据\n    financialIndicator: {\n        name: \"financialIndicator\",\n        path: DATA_PATH.financial,\n        ext: \".id\",\n    },\n    // 主营业务构成\n    financialMainbiz: {\n        name: \"financialMainbiz\",\n        path: DATA_PATH.financial,\n        ext: \".mb\",\n    },\n    // 财报披露日期\n    disclosureDate: {\n        name: \"disclosureDate\",\n        path: DATA_PATH.financial,\n        ext: \".dt\",\n    },\n};\n\nasync function readStockData(dataName, tsCode) {\n    if (!stockDataNames[dataName]) {\n        throw new Error(\"不支持的数据类型：\" + dataName);\n    }\n    if (_.isEmpty(tsCode)) {\n        throw new Error(\"未设置读取股票代码\");\n    }\n    let retData = {\n        updateTime: null,\n        data: [],\n        // 下面考虑放个字段说明\n    };\n\n    let params = stockDataParams[dataName];\n    try {\n        await checkDataPath();\n\n        let dataFile = getStockDataFile(dataName, tsCode);\n        try {\n            dailyData = JSON.parse(await fp.readFile(dataFile, \"utf-8\"));\n        } catch (error) {\n            // 文件不存在，不考虑其它错误\n            dailyData = { data: [] };\n        }\n    } catch (error) {\n        logger.error(`从本地读取个股数据${dataName}时发生错误 ${error}`);\n    }\n    return dailyData;\n}\n\nasync function getStockDataFile(dataName, tsCode) {\n    // logger.debug(`计算文件名：${dataName}, ${tsCode}`);\n    let params = stockDataParams[dataName];\n    // logger.debug(\"获取参数：%o\", params);\n    if (!params) {\n        throw new Error(\"不支持的数据类型\" + dataName);\n    }\n    if (_.isEmpty(tsCode)) {\n        throw new Error(\"未设置读取股票代码\");\n    }\n    return path.join(getDataRoot(), params.path, tsCode + params.ext + \".json\");\n}\n\nasync function readStockDaily(tsCode) {\n    if (_.isEmpty(tsCode)) {\n        throw new Error(\"未设置读取股票代码\");\n    }\n    let dailyData = {\n        updateTime: null,\n        data: [],\n    };\n    try {\n        await checkDataPath();\n\n        let stockDailyHistoryFile = path.join(\n            getDataRoot(),\n            DATA_PATH.daily,\n            tsCode + \".json\"\n        );\n        try {\n            // await fp.access(stockDailyHistoryFile, fs.constants.F_OK)\n            dailyData = JSON.parse(\n                await fp.readFile(stockDailyHistoryFile, \"utf-8\")\n            );\n        } catch (error) {\n            // logger.debug(\"读取本地日线数据错误\", error)\n            // 文件不存在，不考虑其它错误\n            dailyData = { data: [] };\n        }\n    } catch (error) {\n        logger.error(`从本地读取日线数据时发生错误 ${error}`);\n    }\n    return dailyData;\n}\n\nasync function readStockAdjustFactor(tsCode) {\n    if (_.isEmpty(tsCode)) {\n        throw new Error(\"未设置读取股票代码\");\n    }\n    let adjData = {\n        updateTime: null,\n        data: [],\n    };\n    try {\n        await checkDataPath();\n\n        let stockAdjFile = path.join(\n            getDataRoot(),\n            DATA_PATH.daily,\n            tsCode + \".adj.json\"\n        );\n        try {\n            adjData = JSON.parse(await fp.readFile(stockAdjFile, \"utf-8\"));\n        } catch (error) {\n            logger.debug(`读取股票复权因子文件${stockAdjFile} 错误：${error}`);\n            adjData = {\n                updateTime: null,\n                data: [],\n            };\n        }\n    } catch (error) {\n        logger.error(`从本地读取日线复权因子数据时发生错误 ${error}`);\n    }\n    return adjData;\n}\n\nasync function readStockDailyBasic(tsCode) {\n    if (_.isEmpty(tsCode)) {\n        throw new Error(\"未设置读取股票代码\");\n    }\n    let basicData = {\n        updateTime: null,\n        data: [],\n    };\n    try {\n        await checkDataPath();\n\n        let stockBasicFile = path.join(\n            getDataRoot(),\n            DATA_PATH.info,\n            tsCode + \".info.json\"\n        );\n        try {\n            basicData = JSON.parse(await fp.readFile(stockBasicFile, \"utf-8\"));\n        } catch (error) {\n            logger.debug(`读取基本面文件${stockBasicFile} 错误：${error}`);\n            basicData = {\n                updateTime: null,\n                data: [],\n            };\n        }\n    } catch (error) {\n        logger.error(`从本地读取基本面数据时发生错误 ${error}`);\n    }\n    return basicData;\n}\n\nasync function checkDataPath() {\n    let dataPath = getDataRoot();\n\n    // 做基础的目录访问检查\n    try {\n        await fp.access(\n            dataPath,\n            fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK\n        );\n    } catch (error) {\n        logger.debug(`检查数据根目录错误 ${error}`);\n        await fp.mkdir(dataPath, { recursive: true });\n    }\n\n    for (let key of Object.keys(DATA_PATH)) {\n        let tmpPath = path.join(dataPath, DATA_PATH[key]);\n        try {\n            await fp.access(\n                tmpPath,\n                fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK\n            );\n        } catch (error) {\n            logger.debug(`检查目录${DATA_PATH[key]}错误 ${error}`);\n            await fp.mkdir(tmpPath, { recursive: true });\n        }\n    }\n    // let dailyPath = path.join(dataPath, DATA_PATH.daily);\n    // try {\n    //     await fp.access(\n    //         dailyPath,\n    //         fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK\n    //     );\n    // } catch (error) {\n    //     logger.debug(`检查日线历史目录错误 ${error}`);\n    //     await fp.mkdir(dailyPath, { recursive: true });\n    // }\n\n    // let infoPath = path.join(dataPath, DATA_PATH.info);\n    // try {\n    //     await fp.access(\n    //         infoPath,\n    //         fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK\n    //     );\n    // } catch (error) {\n    //     logger.debug(`检查信息数据目录错误 ${error}`);\n    //     await fp.mkdir(infoPath, { recursive: true });\n    // }\n}\n\nexport {\n    readStockData,\n    readStockList,\n    readStockIndexList,\n    readStockDaily,\n    readStockAdjustFactor,\n    readStockDailyBasic,\n    checkDataPath,\n    getDataRoot,\n    getStockDataFile,\n    DATA_PATH_ROOT,\n    DATA_PATH,\n    STOCKLIST_FILE,\n    INDEXLIST_FILE,\n    stockDataNames,\n};\n","/**\n * TODO:\n * 1. 数据结构（对应到本地或远程存储结构）\n *\n *\n * 股票数据访问层，主要用于计算和一些处理\n * 1. 后续会将数据的远程访问，本地访问在这里集成\n * 2.\n */\n\nconst _ = require(\"lodash\");\nconst moment = require(\"moment\");\nconst executeTasks = require(\"@wt/lib-taskqueue\");\nconst tushare = require(\"@wt/lib-tushare\");\n\nconst pino = require(\"pino\");\n\nconst logger = pino({\n    level: process.env.LOGGER || \"info\",\n    prettyPrint: {\n        levelFirst: true,\n        translateTime: \"SYS:yyyy-mm-dd HH:MM:ss.l\",\n        crlf: true,\n    },\n    prettifier: require(\"pino-pretty\"),\n});\n\nimport {\n    // readStockList,\n    // readStockIndexList,\n    readStockDaily,\n    readStockAdjustFactor,\n    readStockDailyBasic,\n    checkDataPath,\n    getDataRoot,\n    getStockDataFile,\n    DATA_PATH,\n    STOCKLIST_FILE,\n    INDEXLIST_FILE,\n    stockDataNames,\n} from \"./stockdata-query\";\n\n// const os = require(\"os\")\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst fp = fs.promises;\n\nconst QUEUE_MAX = 20;\n// const updateControl = new FlowControl(QUEUE_MAX, 0, \"更新数据控制池\");\n\n/**\n * 更新个股信息数据，包括个股的日数据，基本面，复权因子，财务相关的各种数据；\n *\n * @param {string} dataName 数据名称\n * @param {string} tsCode 股票代码\n * @param {boolean} force 是否强制全部更新\n */\nasync function updateStockInfoData(dataName, tsCode, force = false) {\n    // logger.log(\"更新日线：\", tsCode, force)\n    if (_.isEmpty(dataName) || !stockDataNames[dataName]) {\n        throw Error(\"请填写正确的个股数据名称！\" + dataName);\n    }\n    if (_.isEmpty(tsCode)) {\n        return { data: [] };\n    }\n\n    let stockData;\n    try {\n        if (force) {\n            logger.debug(`需要强制更新数据：${tsCode}`);\n            try {\n                let [data, endDate, startDate] = await tushare.queryStockInfo(\n                    dataName,\n                    tsCode\n                );\n\n                stockData = {\n                    updateTime: moment().toISOString(),\n                    startDate,\n                    endDate,\n                    data,\n                };\n                logger.info(\n                    `个股数据${dataName}强制更新，代码 ${tsCode}, 更新时间：${\n                        stockData.updateTime\n                    }, 更新时间范围: ${startDate} - ${endDate}, 总条数：${\n                        stockData.data && stockData.data.length\n                    }`\n                );\n            } catch (error) {\n                logger.error(\n                    `强制更新个股${tsCode}数据${dataName}时出现错误：${error}`\n                );\n                throw error;\n            }\n        } else {\n            stockData = await readStockData(dataName, tsCode);\n\n            let startDate = \"\";\n            if (stockData.data && stockData.data.length > 0) {\n                let lastDate = stockData.endDate;\n                startDate = moment(lastDate, \"YYYYMMDD\")\n                    .add(1, \"days\")\n                    .format(\"YYYYMMDD\");\n                let now = moment();\n                if (now.diff(startDate, \"days\") <= 0 && now.hours() < 15) {\n                    // 还没有最新一天的数据，不需要\n                    logger.log(`没有新的数据，不需要更新 ${tsCode}`);\n                    return;\n                }\n            }\n\n            let [\n                newData,\n                endDate,\n                queryStartDate,\n            ] = await tushare.queryStockInfo(dataName, tsCode, startDate);\n\n            if (newData && newData.length > 0) {\n                stockData.updateTime = moment().toISOString();\n                //stockData.startDate = startDate;\n                stockData.endDate = endDate;\n                stockData.data.unshift(...newData);\n                logger.info(\n                    `个股数据${dataName}更新，代码 ${tsCode}, 更新时间：${\n                        dailyData.updateTime\n                    }, 更新时间范围: ${queryStartDate} - ${endDate}, 更新条数：${\n                        newData && newData.length\n                    }，总条数：${dailyData.data && dailyData.data.length}`\n                );\n            } else {\n                dailyData = null;\n                logger.info(`个股数据${dataName}没有更新，代码 ${tsCode}`);\n            }\n        }\n    } catch (error) {\n        logger.error(`${tsCode} 个股数据${dataName}更新时发生错误，${error}`);\n        throw error;\n    }\n\n    try {\n        if (stockData && stockData.data && stockData.data.length > 0) {\n            await checkDataPath();\n\n            let jsonStr = JSON.stringify(stockData);\n            let stockDataFile = await getStockDataFile(dataName, tsCode);\n            logger.debug(\n                `保存个股${tsCode}数据${dataName}到：${stockDataFile}`\n            );\n            await fp.writeFile(stockDataFile, jsonStr, \"utf-8\");\n        }\n    } catch (error) {\n        throw new Error(\n            `保存个股${tsCode}数据${dataName}时出现错误，请检查后重新执行：${error}`\n        );\n    }\n}\n\n/**\n * 数据更新，如果force为true，则需要将所有数据更新为最新（相当于全部重新读取）\n * @param {boolean} force 强制更新所有数据，表示忽略本地数据，重新获取全部历史数据\n * @param {boolean} includeStock 是否更新股票日线数据，默认不更新\n * @param {boolean} includeFactor 是否更新日线复权因子数据，默认不更新\n * @param {boolean} includeBasic 是否更新股票基本面资料，默认不更新\n * @param {boolean} includeIndex 是否更新指数日线，默认不更新\n */\nasync function updateData(\n    force = false,\n    includeStock = false,\n    includeFactor = false,\n    includeBasic = false,\n    includeIndex = false,\n    all = false\n) {\n    let now = moment();\n    // let endDate = now.format(\"YYYYMMDD\")\n\n    logger.info(\"获取和更新股票列表数据 ...\");\n    logger.debug(\n        `参数：强制更新 ${force}, 全部更新 ${all}，更新股票日线 ${includeStock}, 更新指数日线 ${includeIndex}`\n    );\n    // 首先更新股票列表数据\n    let stockBasicData = await tushare.stockBasic();\n\n    let stockList = {\n        updateTime: now.toISOString(),\n        data: stockBasicData,\n    };\n    await saveListFile(stockList, STOCKLIST_FILE);\n    logger.info(\"股票列表数据更新完毕！\");\n\n    logger.info(\"获取和更新指数列表数据 ...\");\n    // 更新股票指数列表数据\n    let indexList = {\n        updateTime: now.toISOString(),\n        data: [],\n    };\n\n    // logger.debug(\"开始请求指数数据：\")\n    let allIndexData = await Promise.all(\n        tushare.indexMarketList.map(async (market) => {\n            return tushare.indexBasic(market.code);\n            // logger.debug(\"返回指数基础数据：\", indexBasicData)\n            // return indexBasicData\n        })\n    );\n\n    // logger.debug(\"所有指数请求返回！\", allIndexData && allIndexData.length)\n    if (allIndexData && allIndexData.length > 0) {\n        allIndexData.forEach((data) => {\n            // logger.debug(\"指数数据：\", data && data.length)\n            if (data && data.length > 0) {\n                // 合并之前做一次数据检查，对于已经终止的指数进行过滤\n                let total = data.length;\n                data = data.filter((item) => {\n                    return _.isEmpty(item.exp_date);\n                });\n                let filteredTotal = data.length;\n                logger.debug(`指数过滤，总共${total}, 剩余${filteredTotal}`);\n                indexList.data.push(...data);\n            }\n        });\n    }\n    // logger.debug(\"保存指数数据！\")\n    await saveListFile(indexList, INDEXLIST_FILE);\n    logger.info(\"更新指数列表数据完成！\");\n\n    // 下面针对已经获取的股票列表和指数列表，按照列表需要更新对应的每日信息，展开方式为每个股票按照时间段（更新或全部）进行\n    // 初步的方法采用的是每个列表针对更新的信息，生成任务队列，然后异步排队执行（executeTasks）\n    // 因为服务器按照不同的数据接口进行流控，本地队列放置过多的并发执行造成内存和执行效率，因此有并发执行数量以及相同接口流控两层控制\n    // 为了加开效率，考虑将并发执行改变为二维数组，即可以考虑一次提交多个流控的队列给executeTasks，流控应当在并行过程中平均分配多个\n    // 不同的执行队列，这样可以把执行效率提高到较好的状态\n\n    let totalStockWorkers = [];\n    let taskCount = 0;\n    if (all) {\n        taskCount = 3;\n    } else {\n        if (includeStock) taskCount++;\n        if (includeFactor) taskCount++;\n        if (includeBasic) taskCount++;\n    }\n    // 这里定义股票任务的序号，根据传入的参数决定\n    let taskIndex = 0;\n\n    if (all || includeStock) {\n        logger.info(\"开始更新股票日线数据...\");\n        // 这里直接采用Promise的方式\n        if (_.isArray(stockBasicData) && stockBasicData.length > 0) {\n            //let tasks =\n            stockBasicData.forEach((item, index) => {\n                totalStockWorkers[index * taskCount + taskIndex] = {\n                    caller: updateDailyData,\n                    args: [item.ts_code, force, \"S\"],\n                };\n            });\n\n            // let workers = executeTasks(tasks, 20, \"股票日线更新任务\");\n            // try {\n            //     logger.debug(\"等待股票日线更新队列完成...\");\n            //     await Promise.all(workers);\n            //     logger.debug(\"股票日线更新队列全部执行完毕！\");\n            // } catch (error) {\n            //     logger.error(`股票日线任务执行 错误！${error}`);\n            // }\n        }\n        // logger.info(tushare.showInfo());\n        logger.info(\"股票日线数据更新完毕!\");\n        taskIndex++;\n    }\n\n    if (all || includeFactor) {\n        logger.info(\"开始更新股票复权因子数据...\");\n        // 这里直接采用Promise的方式\n        if (_.isArray(stockBasicData) && stockBasicData.length > 0) {\n            //let tasks =\n            stockBasicData.forEach((item, index) => {\n                totalStockWorkers[taskCount * index + taskIndex] = {\n                    caller: updateAdjustFactorData,\n                    args: [item.ts_code, force],\n                };\n            });\n\n            // let workers = executeTasks(tasks, 20, \"股票复权因子更新任务\");\n            // try {\n            //     logger.debug(\"等待股票日线复权因子更新队列完成...\");\n            //     await Promise.all(workers);\n            //     logger.debug(\"股票日线复权因子更新队列全部执行完毕！\");\n            // } catch (error) {\n            //     logger.error(`股票日线复权因子任务执行 错误！${error}`);\n            // }\n        }\n\n        // logger.info(tushare.showInfo());\n        logger.info(\"股票复权因子数据更新完毕!\");\n        taskIndex++;\n    }\n\n    if (all || includeBasic) {\n        logger.info(\"开始更新基本面数据...\");\n        // 这里直接采用Promise的方式\n        if (_.isArray(stockBasicData) && stockBasicData.length > 0) {\n            // let tasks =\n            stockBasicData.forEach((item, index) => {\n                totalStockWorkers[taskCount * index + taskIndex] = {\n                    caller: updateDailyBasicData,\n                    args: [item.ts_code, force],\n                };\n            });\n\n            // let workers = executeTasks(tasks, 20, \"基本面更新任务\");\n            // try {\n            //     logger.debug(\"等待基本面数据更新队列完成...\");\n            //     await Promise.all(workers);\n            //     logger.debug(\"基本面数据更新队列全部执行完毕！\");\n            // } catch (error) {\n            //     logger.error(`股票基本面更新任务执行 错误！${error}`);\n            // }\n        }\n\n        // logger.info(tushare.showInfo());\n        logger.info(\"股票基本面数据更新完毕!\");\n        taskIndex++;\n    }\n\n    if (totalStockWorkers && totalStockWorkers.length > 0) {\n        let workers = executeTasks(totalStockWorkers, 30, \"个股信息更新任务\");\n        try {\n            logger.debug(\"等待个股数据更新队列完成...\");\n            await Promise.all(workers);\n            logger.info(tushare.showInfo());\n            logger.debug(\"个股数据更新队列全部执行完毕！\");\n        } catch (error) {\n            logger.error(`个股数据更新任务执行 错误！${error}`);\n        }\n    }\n\n    // For test\n    // let tmp = stockBasicData[0]\n    // await updateDailyData(tmp, force\n    if (all || includeIndex) {\n        logger.info(\"指数日线数据更新开始 ...\");\n        if (_.isArray(indexList.data) && indexList.data.length > 0) {\n            // indexList.data.forEach((data) => {\n            //     updateControl.call(updateDailyData, data.ts_code, force, \"I\");\n            // });\n            let tasks = indexList.data.map((data) => {\n                return {\n                    caller: updateDailyData,\n                    args: [data.ts_code, force, \"I\"],\n                };\n            });\n            let workers = executeTasks(tasks, 20, \"指数日线更新任务\");\n\n            try {\n                logger.debug(\"等待指数日线更新队列完成 ...\");\n                await Promise.all(workers);\n                logger.debug(\"指数日线数据更新队列全部完成！\");\n            } catch (error) {\n                logger.error(`指数日线任务执行 错误：%o`, error);\n            }\n        }\n        logger.info(tushare.showInfo());\n        logger.info(\"指数日线数据更新完毕！\");\n    }\n\n    // logger.log(tushare.showInfo());\n}\n\n/**\n * 更新指定代码的日历史数据\n * @param {string} tsCode 代码\n * @param {boolean} force 是否强制更新\n * @param {string} type 股票类型，S表示普通股票，I表示指数\n */\nasync function updateDailyData(tsCode, force = false, type = \"S\") {\n    // logger.log(\"更新日线：\", tsCode, force)\n    if (_.isEmpty(tsCode)) {\n        return { data: [] };\n    }\n    if (type !== \"S\" && type !== \"I\") {\n        return { data: [] };\n    }\n\n    // let tsCode = data.ts_code\n    // logger.log(\"执行更新日线：\", tsCode, force)\n    let dailyData;\n    try {\n        if (force) {\n            logger.debug(`force update ${tsCode}`);\n            let data;\n            if (type === \"S\") {\n                data = await tushare.stockDaily(tsCode);\n            } else {\n                data = await tushare.indexDaily(tsCode);\n            }\n            dailyData = {\n                updateTime: moment().toISOString(),\n                data,\n            };\n            logger.info(\n                `日线数据强制更新，代码 ${tsCode}, 更新时间：${\n                    dailyData.updateTime\n                }, 总条数：${dailyData.data && dailyData.data.length}`\n            );\n        } else {\n            dailyData = await readStockDaily(tsCode);\n\n            let startDate = \"\";\n            if (dailyData.data && dailyData.data.length > 0) {\n                let lastDate = dailyData.data[0].trade_date;\n                startDate = moment(lastDate, \"YYYYMMDD\")\n                    .add(1, \"days\")\n                    .format(\"YYYYMMDD\");\n                let now = moment();\n                if (now.diff(startDate, \"days\") <= 0 && now.hours() < 15) {\n                    // 还没有最新一天的数据，不需要\n                    logger.log(`没有新的数据，不需要更新 ${tsCode}`);\n                    return;\n                }\n            }\n\n            let newData;\n            if (type === \"S\") {\n                newData = await tushare.stockDaily(tsCode, startDate);\n            } else {\n                newData = await tushare.indexDaily(tsCode, startDate);\n            }\n            if (newData && newData.length > 0) {\n                dailyData.updateTime = moment().toISOString();\n                dailyData.data.unshift(...newData);\n                logger.info(\n                    `日线数据更新，代码 ${tsCode}, 更新时间：${\n                        dailyData.updateTime\n                    }, 更新条数：${newData && newData.length}，总条数：${\n                        dailyData.data && dailyData.data.length\n                    }`\n                );\n            } else {\n                dailyData = null;\n                logger.info(`日线数据没有更新，代码 ${tsCode}`);\n            }\n        }\n    } catch (error) {\n        logger.error(`${tsCode} 日线数据更新时发生错误，${error}`);\n        throw error;\n    }\n\n    try {\n        if (dailyData) {\n            await checkDataPath();\n\n            let jsonStr = JSON.stringify(dailyData);\n            let stockDailyFile = path.join(\n                getDataRoot(),\n                DATA_PATH.daily,\n                tsCode + \".json\"\n            );\n            await fp.writeFile(stockDailyFile, jsonStr, \"utf-8\");\n        }\n    } catch (error) {\n        throw new Error(\n            \"保存日线历史数据时出现错误，请检查后重新执行：\" +\n                tsCode +\n                \",\" +\n                error\n        );\n    }\n}\n\n/**\n * 更新指定代码的复权因子历史数据\n * @param {string} tsCode 代码\n * @param {boolean} force 是否强制更新\n */\nasync function updateAdjustFactorData(tsCode, force = false) {\n    // logger.log(\"更新日线：\", tsCode, force)\n    if (_.isEmpty(tsCode)) {\n        return { data: [] };\n    }\n\n    // let tsCode = data.ts_code\n    // logger.log(\"执行更新日线：\", tsCode, force)\n    let adjData;\n    try {\n        if (force) {\n            logger.debug(`force update ${tsCode}`);\n            adjData = {\n                updateTime: moment().toISOString(),\n                data: await tushare.adjustFactor(tsCode),\n            };\n\n            logger.info(\n                `股票复权因子数据强制更新，代码 ${tsCode}, 总条数：${\n                    adjData.data && adjData.data.length\n                }`\n            );\n        } else {\n            adjData = await readStockAdjustFactor(tsCode);\n\n            let startDate = \"\";\n            if (adjData.data && adjData.data.length > 0) {\n                let lastDate = adjData.data[0].trade_date;\n                startDate = moment(lastDate, \"YYYYMMDD\")\n                    .add(1, \"days\")\n                    .format(\"YYYYMMDD\");\n                let now = moment();\n                if (now.diff(startDate, \"days\") <= 0 && now.hours() < 15) {\n                    // 还没有最新一天的数据，不需要\n                    logger.debug(`没有新的复权因子数据，不需要更新 ${tsCode}`);\n                    return;\n                }\n            }\n\n            let newAdjData = await tushare.adjustFactor(tsCode, startDate);\n            logger.debug(\n                `${tsCode} 复权因子数据返回：${newAdjData && newAdjData.length}`\n            );\n            if (newAdjData && newAdjData.length > 0) {\n                adjData.updateTime = moment().toISOString();\n                adjData.data.unshift(...newAdjData);\n                logger.info(\n                    `日线复权因子数据更新，代码 ${tsCode}, 更新条数：${\n                        newAdjData && newAdjData.length\n                    }，总条数：${adjData.data && adjData.data.length}`\n                );\n            } else {\n                adjData = null;\n                logger.info(`日线复权因子数据没有更新，代码 ${tsCode}`);\n                return;\n            }\n        }\n    } catch (error) {\n        logger.error(`${tsCode} 日线复权因子数据更新时发生错误，${error}`);\n        throw error;\n    }\n\n    try {\n        if (adjData && adjData.data && adjData.data.length > 0) {\n            let jsonStr = JSON.stringify(adjData);\n            let adjFile = path.join(\n                getDataRoot(),\n                DATA_PATH.daily,\n                tsCode + \".adj.json\"\n            );\n            await fp.writeFile(adjFile, jsonStr, \"utf-8\");\n        }\n    } catch (error) {\n        throw new Error(\n            \"保存复权因子数据时出现错误，请检查后重新执行：\" +\n                tsCode +\n                \",\" +\n                error\n        );\n    }\n}\n\nasync function updateDailyBasicData(tsCode, force = false) {\n    if (_.isEmpty(tsCode)) {\n        return { data: [] };\n    }\n\n    let adjData;\n    try {\n        if (force) {\n            logger.debug(`force update ${tsCode}`);\n            adjData = {\n                updateTime: moment().toISOString(),\n                data: await tushare.dailyBasic(tsCode),\n            };\n\n            logger.info(\n                `股票基本面数据强制更新，代码 ${tsCode}, 总条数：${\n                    adjData.data && adjData.data.length\n                }`\n            );\n        } else {\n            adjData = await readStockDailyBasic(tsCode);\n\n            let startDate = \"\";\n            if (adjData && adjData.data && adjData.data.length > 0) {\n                let lastDate = adjData.data[0].trade_date;\n                startDate = moment(lastDate, \"YYYYMMDD\")\n                    .add(1, \"days\")\n                    .format(\"YYYYMMDD\");\n                let now = moment();\n                if (now.diff(startDate, \"days\") <= 0 && now.hours() < 15) {\n                    // 还没有最新一天的数据，不需要\n                    logger.debug(\n                        `没有新的股票基本面数据，不需要更新 ${tsCode}`\n                    );\n                    return;\n                }\n            }\n\n            let newData = await tushare.dailyBasic(tsCode, startDate);\n            logger.debug(\n                `${tsCode} 基本面数据返回：${newData && newData.length}`\n            );\n            if (newData && newData.length > 0) {\n                adjData.updateTime = moment().toISOString();\n                adjData.data.unshift(...newData);\n                logger.info(\n                    `基本面数据更新，代码 ${tsCode}, 更新条数：${\n                        newData && newData.length\n                    }，总条数：${adjData.data && adjData.data.length}`\n                );\n            } else {\n                adjData = null;\n                logger.info(`基本面数据没有更新，代码 ${tsCode}`);\n                return;\n            }\n        }\n    } catch (error) {\n        logger.error(`${tsCode} 基本面数据更新时发生错误，${error}`);\n        throw error;\n    }\n\n    try {\n        if (adjData && adjData.data && adjData.data.length > 0) {\n            let jsonStr = JSON.stringify(adjData);\n            let adjFile = path.join(\n                getDataRoot(),\n                DATA_PATH.info,\n                tsCode + \".basic.json\"\n            );\n            await fp.writeFile(adjFile, jsonStr, \"utf-8\");\n        }\n    } catch (error) {\n        throw new Error(\n            \"保存基本面数据时出现错误，请检查后重新执行：\" +\n                tsCode +\n                \",\" +\n                error\n        );\n    }\n}\n\n/**\n * 通过日期将复权因子数据合并到日线数据中，可以在后续的使用中直接使用\n * @param {Array} dailyData 日线数据\n * @param {Array} adjData 复权因子数据\n */\nasync function combineAdjustFactors(dailyData, adjData) {\n    // let retData = [];\n    if (dailyData && dailyData.length > 0) {\n        dailyData = dailyData.map((daily) => {\n            let findIndex = adjData.findIndex((adj, j) => {\n                return adj.trade_date === daily.trade_date;\n            });\n            if (findIndex >= 0 && findIndex < dailyData.length) {\n                let adj = adjData.splice(findIndex, 1)[0];\n                daily.adj_factor = adj.adj_factor;\n                // logger.debug(\n                //     `找到${daily.trade_date} 复权因子 ${adj.adj_factor}, %o`,\n                //     adj\n                // );\n            } else {\n                logger.debug(`没有找到${daily.trade_date}的复权因子`);\n            }\n            return daily;\n        });\n    }\n    return [dailyData, adjData];\n}\n\n// async function saveStockList(data) {\n//     try {\n//         await checkDataPath()\n\n//         let jsonStr = JSON.stringify(data)\n//         let stockListPath = path.join(getDataRoot(), STOCKLIST_FILE)\n\n//         await fp.writeFile(stockListPath, jsonStr, {encoding: \"utf-8\"})\n//     } catch (error) {\n//         throw new Error(\"保存股票列表数据时出现错误，请检查后重新执行：\" + error)\n//     }\n// }\n\nasync function saveListFile(data, fileName) {\n    try {\n        await checkDataPath();\n\n        let jsonStr = JSON.stringify(data);\n        let listPath = path.join(getDataRoot(), fileName);\n\n        await fp.writeFile(listPath, jsonStr, { encoding: \"utf-8\" });\n    } catch (error) {\n        throw new Error(\"保存列表数据时出现错误，请检查后重新执行：\" + error);\n    }\n}\n\n/**\n * 清除所有已经同步的数据\n */\nasync function clearAllData() {\n    try {\n        logger.debug(\"检查根目录状态：\");\n        await checkDataPath();\n\n        // 首先删除股票列表信息文件\n        logger.info(\"清理股票列表数据...\");\n        let stockListPath = path.join(getDataRoot(), STOCKLIST_FILE);\n        try {\n            await fp.access(stockListPath, fs.constants.F_OK);\n            try {\n                await fp.unlink(stockListPath);\n            } catch (error) {\n                throw error;\n            }\n        } catch (error) {\n            // 文件不存在，直接忽略\n        }\n        logger.info(\"清理股票列表数据完成\");\n\n        logger.info(\"清理指数列表数据...\");\n        let indexListPath = path.join(getDataRoot(), INDEXLIST_FILE);\n        try {\n            await fp.access(indexListPath, fs.constants.F_OK);\n            try {\n                await fp.unlink(indexListPath);\n            } catch (error) {\n                throw error;\n            }\n        } catch (error) {\n            // 文件不存在，直接忽略\n        }\n        logger.info(\"清理指数列表数据完成\");\n\n        logger.info(\"清理股票历史数据...\");\n        // 下面删除股票历史数据目录\n        let stockDailyHistoryPath = path.join(getDataRoot(), DATA_PATH.daily);\n        try {\n            await fp.access(stockDailyHistoryPath, fs.constants.F_OK);\n\n            try {\n                let fileList = await fp.readdir(stockDailyHistoryPath);\n                logger.info(`共有${fileList.length}个历史数据文件待删除`);\n                fileList.forEach(async (filePath) => {\n                    // logger.log(\"to be remove: \", filePath)\n                    await fp.unlink(path.join(stockDailyHistoryPath, filePath));\n                });\n            } catch (error) {\n                throw error;\n            }\n        } catch (error) {\n            // 没有目录\n        }\n        logger.info(\"清理股票历史数据完成\");\n    } catch (error) {\n        throw new Error(\"清除所有已经同步数据发生错误：\" + error);\n    }\n}\n\nexport {\n    clearAllData,\n    updateData,\n    updateStockInfoData,\n    updateDailyData,\n    updateAdjustFactorData,\n    updateDailyBasicData,\n    stockDataNames,\n};\n"],"names":["_","require","os","path","fs","fp","promises","pino","logger","level","process","env","LOGGER","prettyPrint","levelFirst","translateTime","crlf","prettifier","DATA_PATH_ROOT","DATA_PATH","daily","info","financial","STOCKLIST_FILE","INDEXLIST_FILE","getDataRoot","join","homedir","readStockList","retData","checkDataPath","stockListPath","JSON","parse","readFile","isEmpty","debug","updateTime","error","Error","data","readStockIndexList","stockIndexListPath","stockDataNames","adjustFactor","suspendInfo","dailyBasic","moneyFlow","indexDaily","income","balanceSheet","cashFlow","forecast","express","dividend","financialIndicator","financialMainbiz","disclosureDate","stockDataParams","name","ext","getStockDataFile","dataName","tsCode","params","readStockDaily","dailyData","stockDailyHistoryFile","readStockAdjustFactor","adjData","stockAdjFile","readStockDailyBasic","basicData","stockBasicFile","dataPath","access","constants","F_OK","R_OK","W_OK","mkdir","recursive","key","Object","keys","tmpPath","moment","executeTasks","tushare","updateStockInfoData","force","stockData","endDate","startDate","queryStockInfo","toISOString","length","readStockData","lastDate","add","format","now","diff","hours","log","newData","queryStartDate","unshift","jsonStr","stringify","stockDataFile","writeFile","updateData","includeStock","includeFactor","includeBasic","includeIndex","all","stockBasicData","stockBasic","stockList","saveListFile","indexList","allIndexData","Promise","indexMarketList","map","market","indexBasic","code","forEach","total","filter","item","exp_date","filteredTotal","push","totalStockWorkers","taskCount","taskIndex","isArray","index","caller","updateDailyData","args","ts_code","updateAdjustFactorData","updateDailyBasicData","workers","showInfo","tasks","type","stockDaily","trade_date","stockDailyFile","newAdjData","adjFile","fileName","listPath","encoding","clearAllData","unlink","indexListPath","stockDailyHistoryPath","fileList","readdir","filePath"],"mappings":"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"}