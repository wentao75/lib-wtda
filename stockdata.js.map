{"version":3,"file":"stockdata.js","sources":["src/stockdata-query.js","src/stockdata-update.js"],"sourcesContent":["/**\n * TODO:\n * 1. 数据结构（对应到本地或远程存储结构）\n *\n *\n * 股票数据访问层，主要用于计算和一些处理\n * 1. 后续会将数据的远程访问，本地访问在这里集成\n * 2.\n */\n\nconst _ = require(\"lodash\");\n\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst fp = fs.promises;\n\nconst pino = require(\"pino\");\n\nconst logger = pino({\n    level: process.env.LOGGER || \"info\",\n    prettyPrint: {\n        levelFirst: true,\n        translateTime: \"SYS:yyyy-mm-dd HH:MM:ss.l\",\n        crlf: true,\n    },\n    prettifier: require(\"pino-pretty\"),\n});\n\nconst DATA_PATH_ROOT = \".wtda\";\nconst DATA_PATH = {\n    daily: \"daily\",\n    info: \"info\",\n    financial: \"fin\",\n};\n\n// const DAILYHISTORY_PATH = \"daily\";\n// const INFO_PATH = \"info\";\nconst STOCKLIST_FILE = \"stock-list.json\";\nconst INDEXLIST_FILE = \"index-list.json\";\n\nfunction getDataRoot() {\n    return path.join(os.homedir(), DATA_PATH_ROOT);\n}\n\n/**\n * 读取目前可用的完整股票列表返回，返回数据为对象\n * {\n *    info: {\n *      updateTime,\n *      ...\n *    }\n *    data: stockList[]\n * }\n *\n * stockList: [{\n *    ts_code,\n *    symbol,\n *    name,\n *    area,\n *    industry,\n *    fullname,\n *    enname,\n *    market,\n *    exchange,\n *    curr_type,\n *    list_status,\n *    delist_date,\n *    is_hs\n * }]\n *\n */\nasync function readStockList() {\n    let retData = null;\n    try {\n        await checkDataPath();\n\n        // 首先从目录中读取对应的列表文件，然后根据文件当中的信息决定是否需要更新\n        let stockListPath = path.join(getDataRoot(), STOCKLIST_FILE);\n        retData = JSON.parse(await fp.readFile(stockListPath, \"utf-8\"));\n        if (!_.isEmpty(retData)) {\n            logger.debug(`股票列表更新时间 @${retData.updateTime}`);\n        }\n    } catch (error) {\n        logger.error(`读取股票列表数据错误：${error}`);\n        throw new Error(\n            \"读取股票列表过程中出现错误，请检查后重新运行：\" + error\n        );\n        // retData = null\n    }\n\n    if (_.isEmpty(retData)) {\n        // 读取数据不存在\n        return {\n            updateTime: \"\",\n            data: [],\n        };\n    }\n    return retData;\n}\n\nasync function readStockIndexList() {\n    let retData = null;\n    try {\n        await checkDataPath();\n\n        // 首先从目录中读取对应的列表文件，然后根据文件当中的信息决定是否需要更新\n        let stockIndexListPath = path.join(getDataRoot(), INDEXLIST_FILE);\n        retData = JSON.parse(await fp.readFile(stockIndexListPath, \"utf-8\"));\n        if (!_.isEmpty(retData)) {\n            logger.debug(`指数列表更新时间 @${retData.updateTime}`);\n        }\n    } catch (error) {\n        logger.error(`读取指数列表数据错误：${error}`);\n        throw new Error(\n            \"读取指数列表过程中出现错误，请检查后重新运行：\" + error\n        );\n        // retData = null\n    }\n\n    if (_.isEmpty(retData)) {\n        // 读取数据不存在\n        return {\n            updateTime: \"\",\n            data: [],\n        };\n    }\n    return retData;\n}\n\nconst stockDataNames = {\n    // 日数据\n    daily: \"daily\",\n    // 复权因子\n    adjustFactor: \"adjustFactor\",\n    // 停复牌信息\n    suspendInfo: \"suspendInfo\",\n    // 基本面信息\n    dailyBasic: \"dailyBasic\",\n    // 个股资金流向\n    moneyFlow: \"moneyFlow\",\n    // // 指数\n    // indexDailyBasic: \"indexDailyBasic\",\n    // 指数日线\n    indexDaily: \"indexDaily\",\n    // 利润表\n    income: \"income\",\n    // 负债表\n    balanceSheet: \"balanceSheet\",\n    // 现金流\n    cashFlow: \"cashFlow\",\n    // 业绩预告\n    forecast: \"forecast\",\n    // 业绩快报\n    express: \"express\",\n    // 分红送股\n    dividend: \"dividend\",\n    // 财务指标数据\n    financialIndicator: \"financialIndicator\",\n    // 主营业务构成\n    financialMainbiz: \"financialMainbiz\",\n    // 财报披露日期\n    disclosureDate: \"disclosureDate\",\n};\n\nconst stockDataParams = {\n    // 日数据\n    daily: { name: \"daily\", path: DATA_PATH.daily, ext: \"\" },\n    // 复权因子\n    adjustFactor: { name: \"adjustFactor\", path: DATA_PATH.daily, ext: \".adj\" },\n    // 停复牌信息\n    suspendInfo: { name: \"suspendInfo\", path: DATA_PATH.info, ext: \".sus\" },\n    // 基本面信息\n    dailyBasic: { name: \"dailyBasic\", path: DATA_PATH.info, ext: \".bsc\" },\n    // 个股资金流向\n    moneyFlow: { name: \"moneyFlow\", path: DATA_PATH.info, ext: \".mf\" },\n    // // 指数\n    // indexDailyBasic: \"indexDailyBasic\",\n    // 指数日线\n    indexDaily: { name: \"indexDaily\", path: DATA_PATH.daily, ext: \"\" },\n    // 利润表\n    income: { name: \"income\", path: DATA_PATH.financial, ext: \".ic\" },\n    // 负债表\n    balanceSheet: {\n        name: \"balanceSheet\",\n        path: DATA_PATH.financial,\n        ext: \".bs\",\n    },\n    // 现金流\n    cashFlow: { name: \"cashFlow\", path: DATA_PATH.financial, ext: \".cf\" },\n    // 业绩预告\n    forecast: { name: \"forecast\", path: DATA_PATH.financial, ext: \".fc\" },\n    // 业绩快报\n    express: { name: \"express\", path: DATA_PATH.financial, ext: \".ep\" },\n    // 分红送股\n    dividend: { name: \"dividend\", path: DATA_PATH.financial, ext: \".dd\" },\n    // 财务指标数据\n    financialIndicator: {\n        name: \"financialIndicator\",\n        path: DATA_PATH.financial,\n        ext: \".id\",\n    },\n    // 主营业务构成\n    financialMainbiz: {\n        name: \"financialMainbiz\",\n        path: DATA_PATH.financial,\n        ext: \".mb\",\n    },\n    // 财报披露日期\n    disclosureDate: {\n        name: \"disclosureDate\",\n        path: DATA_PATH.financial,\n        ext: \".dt\",\n    },\n};\n\nasync function readStockData(dataName, tsCode) {\n    if (!stockDataNames[dataName]) {\n        throw new Error(\"不支持的数据类型：\" + dataName);\n    }\n    if (_.isEmpty(tsCode)) {\n        throw new Error(\"未设置读取股票代码\");\n    }\n    let retData = {\n        updateTime: null,\n        data: [],\n        // 下面考虑放个字段说明\n    };\n\n    let params = stockDataParams[dataName];\n    try {\n        await checkDataPath();\n\n        let dataFile = getStockDataFile(dataName, tsCode);\n        try {\n            retData = JSON.parse(await fp.readFile(dataFile, \"utf-8\"));\n        } catch (error) {\n            // 文件不存在，不考虑其它错误\n            retData = { data: [] };\n        }\n    } catch (error) {\n        logger.error(`从本地读取个股数据${dataName}时发生错误 ${error}`);\n    }\n    return retData;\n}\n\nasync function getStockDataFile(dataName, tsCode) {\n    // logger.debug(`计算文件名：${dataName}, ${tsCode}`);\n    let params = stockDataParams[dataName];\n    // logger.debug(\"获取参数：%o\", params);\n    if (!params) {\n        throw new Error(\"不支持的数据类型\" + dataName);\n    }\n    if (_.isEmpty(tsCode)) {\n        throw new Error(\"未设置读取股票代码\");\n    }\n    return path.join(getDataRoot(), params.path, tsCode + params.ext + \".json\");\n}\n\n// async function readStockDaily(tsCode) {\n//     if (_.isEmpty(tsCode)) {\n//         throw new Error(\"未设置读取股票代码\");\n//     }\n//     let dailyData = {\n//         updateTime: null,\n//         data: [],\n//     };\n//     try {\n//         await checkDataPath();\n\n//         let stockDailyHistoryFile = path.join(\n//             getDataRoot(),\n//             DATA_PATH.daily,\n//             tsCode + \".json\"\n//         );\n//         try {\n//             // await fp.access(stockDailyHistoryFile, fs.constants.F_OK)\n//             dailyData = JSON.parse(\n//                 await fp.readFile(stockDailyHistoryFile, \"utf-8\")\n//             );\n//         } catch (error) {\n//             // logger.debug(\"读取本地日线数据错误\", error)\n//             // 文件不存在，不考虑其它错误\n//             dailyData = { data: [] };\n//         }\n//     } catch (error) {\n//         logger.error(`从本地读取日线数据时发生错误 ${error}`);\n//     }\n//     return dailyData;\n// }\n\n// async function readStockAdjustFactor(tsCode) {\n//     if (_.isEmpty(tsCode)) {\n//         throw new Error(\"未设置读取股票代码\");\n//     }\n//     let adjData = {\n//         updateTime: null,\n//         data: [],\n//     };\n//     try {\n//         await checkDataPath();\n\n//         let stockAdjFile = path.join(\n//             getDataRoot(),\n//             DATA_PATH.daily,\n//             tsCode + \".adj.json\"\n//         );\n//         try {\n//             adjData = JSON.parse(await fp.readFile(stockAdjFile, \"utf-8\"));\n//         } catch (error) {\n//             logger.debug(`读取股票复权因子文件${stockAdjFile} 错误：${error}`);\n//             adjData = {\n//                 updateTime: null,\n//                 data: [],\n//             };\n//         }\n//     } catch (error) {\n//         logger.error(`从本地读取日线复权因子数据时发生错误 ${error}`);\n//     }\n//     return adjData;\n// }\n\n// async function readStockDailyBasic(tsCode) {\n//     if (_.isEmpty(tsCode)) {\n//         throw new Error(\"未设置读取股票代码\");\n//     }\n//     let basicData = {\n//         updateTime: null,\n//         data: [],\n//     };\n//     try {\n//         await checkDataPath();\n\n//         let stockBasicFile = path.join(\n//             getDataRoot(),\n//             DATA_PATH.info,\n//             tsCode + \".info.json\"\n//         );\n//         try {\n//             basicData = JSON.parse(await fp.readFile(stockBasicFile, \"utf-8\"));\n//         } catch (error) {\n//             logger.debug(`读取基本面文件${stockBasicFile} 错误：${error}`);\n//             basicData = {\n//                 updateTime: null,\n//                 data: [],\n//             };\n//         }\n//     } catch (error) {\n//         logger.error(`从本地读取基本面数据时发生错误 ${error}`);\n//     }\n//     return basicData;\n// }\n\nasync function checkDataPath() {\n    let dataPath = getDataRoot();\n\n    // 做基础的目录访问检查\n    try {\n        await fp.access(\n            dataPath,\n            fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK\n        );\n    } catch (error) {\n        logger.debug(`检查数据根目录错误 ${error}`);\n        await fp.mkdir(dataPath, { recursive: true });\n    }\n\n    for (let key of Object.keys(DATA_PATH)) {\n        let tmpPath = path.join(dataPath, DATA_PATH[key]);\n        try {\n            await fp.access(\n                tmpPath,\n                fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK\n            );\n        } catch (error) {\n            logger.debug(`检查目录${DATA_PATH[key]}错误 ${error}`);\n            await fp.mkdir(tmpPath, { recursive: true });\n        }\n    }\n    // let dailyPath = path.join(dataPath, DATA_PATH.daily);\n    // try {\n    //     await fp.access(\n    //         dailyPath,\n    //         fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK\n    //     );\n    // } catch (error) {\n    //     logger.debug(`检查日线历史目录错误 ${error}`);\n    //     await fp.mkdir(dailyPath, { recursive: true });\n    // }\n\n    // let infoPath = path.join(dataPath, DATA_PATH.info);\n    // try {\n    //     await fp.access(\n    //         infoPath,\n    //         fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK\n    //     );\n    // } catch (error) {\n    //     logger.debug(`检查信息数据目录错误 ${error}`);\n    //     await fp.mkdir(infoPath, { recursive: true });\n    // }\n}\n\ncheckDataPath();\n\nexport {\n    readStockData,\n    readStockList,\n    readStockIndexList,\n    // readStockDaily,\n    // readStockAdjustFactor,\n    // readStockDailyBasic,\n    // checkDataPath,\n    getDataRoot,\n    getStockDataFile,\n    // DATA_PATH_ROOT,\n    DATA_PATH,\n    STOCKLIST_FILE,\n    INDEXLIST_FILE,\n    stockDataNames,\n};\n","/**\n * TODO:\n * 1. 数据结构（对应到本地或远程存储结构）\n *\n *\n * 股票数据访问层，主要用于计算和一些处理\n * 1. 后续会将数据的远程访问，本地访问在这里集成\n * 2.\n */\n\nconst _ = require(\"lodash\");\nconst moment = require(\"moment\");\nconst executeTasks = require(\"@wt/lib-taskqueue\");\nconst tushare = require(\"@wt/lib-tushare\");\n\nconst pino = require(\"pino\");\n\nconst logger = pino({\n    level: process.env.LOGGER || \"info\",\n    prettyPrint: {\n        levelFirst: true,\n        translateTime: \"SYS:yyyy-mm-dd HH:MM:ss.l\",\n        crlf: true,\n    },\n    prettifier: require(\"pino-pretty\"),\n});\n\nimport {\n    readStockData,\n    getDataRoot,\n    getStockDataFile,\n    DATA_PATH,\n    STOCKLIST_FILE,\n    INDEXLIST_FILE,\n    stockDataNames,\n} from \"./stockdata-query\";\n\n// const os = require(\"os\")\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst fp = fs.promises;\n\nconst QUEUE_MAX = 20;\n// const updateControl = new FlowControl(QUEUE_MAX, 0, \"更新数据控制池\");\n\n/**\n * 更新个股信息数据，包括个股的日数据，基本面，复权因子，财务相关的各种数据；\n *\n * @param {string} dataName 数据名称\n * @param {string} tsCode 股票代码\n * @param {boolean} force 是否强制全部更新\n */\nasync function updateStockInfoData(dataName, tsCode, force = false) {\n    // logger.log(\"更新日线：\", tsCode, force)\n    if (_.isEmpty(dataName) || !stockDataNames[dataName]) {\n        throw Error(\"请填写正确的个股数据名称！\" + dataName);\n    }\n    if (_.isEmpty(tsCode)) {\n        return { data: [] };\n    }\n\n    let stockData;\n    try {\n        if (force) {\n            logger.debug(`需要强制更新数据：${tsCode}`);\n            try {\n                let [data, endDate, startDate] = await tushare.queryStockInfo(\n                    dataName,\n                    tsCode\n                );\n\n                stockData = {\n                    updateTime: moment().toISOString(),\n                    startDate,\n                    endDate,\n                    data,\n                };\n                logger.info(\n                    `个股数据${dataName}强制更新，代码 ${tsCode}, 更新时间：${\n                        stockData.updateTime\n                    }, 更新时间范围: ${startDate} - ${endDate}, 总条数：${\n                        stockData.data && stockData.data.length\n                    }`\n                );\n            } catch (error) {\n                logger.error(\n                    `强制更新个股${tsCode}数据${dataName}时出现错误：${error}`\n                );\n                throw error;\n            }\n        } else {\n            stockData = await readStockData(dataName, tsCode);\n\n            let startDate = \"\";\n            if (stockData.data && stockData.data.length > 0) {\n                let lastDate = stockData.endDate;\n                startDate = moment(lastDate, \"YYYYMMDD\")\n                    .add(1, \"days\")\n                    .format(\"YYYYMMDD\");\n                let now = moment();\n                if (now.diff(startDate, \"days\") <= 0 && now.hours() < 15) {\n                    // 还没有最新一天的数据，不需要\n                    logger.log(`没有新的数据，不需要更新 ${tsCode}`);\n                    return;\n                }\n            }\n\n            let [\n                newData,\n                endDate,\n                queryStartDate,\n            ] = await tushare.queryStockInfo(dataName, tsCode, startDate);\n\n            // 如果通过查询获得的数据不存在，需要更新一下startDate\n            if (stockData && !stockData.startDate) {\n                stockData.startDate = queryStartDate;\n            }\n\n            if (newData && newData.length > 0) {\n                stockData.updateTime = moment().toISOString();\n                //stockData.startDate = startDate;\n                stockData.endDate = endDate;\n                stockData.data.unshift(...newData);\n                logger.info(\n                    `个股数据${dataName}更新，代码 ${tsCode}, 更新时间：${\n                        stockData.updateTime\n                    }, 更新时间范围: ${queryStartDate} - ${endDate}, 更新条数：${\n                        newData && newData.length\n                    }，总条数：${stockData.data && stockData.data.length}`\n                );\n            } else {\n                stockData = null;\n                logger.info(`个股数据${dataName}没有更新，代码 ${tsCode}`);\n            }\n        }\n    } catch (error) {\n        logger.error(`${tsCode} 个股数据${dataName}更新时发生错误，${error}`);\n        throw error;\n    }\n\n    try {\n        if (stockData && stockData.data && stockData.data.length > 0) {\n            // await checkDataPath();\n\n            let jsonStr = JSON.stringify(stockData);\n            let stockDataFile = await getStockDataFile(dataName, tsCode);\n            logger.debug(\n                `保存个股${tsCode}数据${dataName}到：${stockDataFile}`\n            );\n            await fp.writeFile(stockDataFile, jsonStr, \"utf-8\");\n        }\n    } catch (error) {\n        throw new Error(\n            `保存个股${tsCode}数据${dataName}时出现错误，请检查后重新执行：${error}`\n        );\n    }\n}\n\n/**\n * 数据更新，如果force为true，则需要将所有数据更新为最新（相当于全部重新读取）\n * @param {boolean} force 强制更新所有数据，表示忽略本地数据，重新获取全部历史数据\n * @param {boolean} updateStock 是否更新个股日线数据，默认不更新\n * @param {boolean} updateFinance 是否更新个股财务数据，默认不更新\n * @param {boolean} updateIndex 是否更新指数信息，默认不更新\n */\nasync function updateData(\n    force = false,\n    updateStock = false,\n    updateFinance = false,\n    updateMainbiz = false,\n    updateIndex = false\n) {\n    logger.debug(\n        `参数：强制更新 ${force}, 更新股票信息数据 ${updateStock}, 更新股票财务数据 ${updateFinance}, 更新指数数据 ${updateIndex}`\n    );\n    // 首先读取和保存股票列表数据\n    let [stockList, indexList] = await updateListData(force);\n\n    if (updateStock) {\n        await readAndUpdateStockListInfoData(stockList, force);\n    }\n\n    if (updateFinance) {\n        await readAndUpdateStockListFinancialData(stockList, force);\n    }\n\n    if (updateMainbiz) {\n        await readAndUpdateStockListMainbizData(stockList, force);\n    }\n\n    if (updateIndex) {\n        await readAndUpdateIndexListInfoData(indexList, force);\n    }\n}\n\nasync function readAndUpdateIndexListInfoData(indexList, force) {\n    if (indexList && indexList.data && indexList.data.length > 0) {\n        // if (all || includeIndex) {\n        logger.info(\"指数日线数据更新开始 ...\");\n        // if (_.isArray(indexList.data) && indexList.data.length > 0) {\n        let tasks = indexList.data.map((data) => {\n            return {\n                caller: updateStockInfoData,\n                args: [stockDataNames.indexDaily, data.ts_code, force],\n            };\n        });\n        let workers = executeTasks(tasks, 20, \"指数日线更新任务\");\n        try {\n            logger.debug(\"等待指数日线更新队列完成 ...\");\n            await Promise.all(workers);\n            logger.debug(\"指数日线数据更新队列全部完成！\");\n        } catch (error) {\n            logger.error(`指数日线任务执行 错误：%o`, error);\n        }\n        // }\n        logger.info(tushare.showInfo());\n        logger.info(\"指数日线数据更新完毕！\");\n    }\n}\n\nconst stockListInfoApiNames = [\n    stockDataNames.daily,\n    stockDataNames.adjustFactor,\n    stockDataNames.suspendInfo,\n    stockDataNames.dailyBasic,\n    stockDataNames.moneyFlow,\n];\nconst stockListFinancialApiNames = [\n    stockDataNames.income,\n    stockDataNames.balanceSheet,\n    stockDataNames.cashFlow,\n    stockDataNames.forecast,\n    stockDataNames.express,\n    stockDataNames.dividend,\n    stockDataNames.financialIndicator,\n    // stockDataNames.financialMainbiz,\n    stockDataNames.disclosureDate,\n];\n\nasync function readAndUpdateStockListFinancialData(stockList, force) {\n    let stockBasicData = stockList && stockList.data;\n    if (stockBasicData && stockBasicData.length > 0) {\n        let tasks = [];\n        logger.info(\"个股财务数据更新准备...\");\n        for (let i = 0; i < stockBasicData.length; i++) {\n            for (let j = 0; j < stockListFinancialApiNames.length; j++) {\n                tasks.push({\n                    caller: updateStockInfoData,\n                    args: [\n                        stockListFinancialApiNames[j],\n                        stockBasicData[i].ts_code,\n                        force,\n                    ],\n                });\n            }\n        }\n        logger.info(\"个股财务数据更新准备完毕！\");\n\n        if (tasks && tasks.length > 0) {\n            let workers = executeTasks(tasks, 30, \"个股财务数据任务\");\n            try {\n                logger.debug(\"等待个股财务数据更新队列完成...\");\n                await Promise.all(workers);\n                logger.info(tushare.showInfo());\n                logger.debug(\"个股财务数据更新队列全部执行完毕！\");\n            } catch (error) {\n                logger.error(`个股财务数据更新任务执行 错误！${error}`);\n            }\n        }\n    }\n}\n\nasync function readAndUpdateStockListMainbizData(stockList, force) {\n    let stockBasicData = stockList && stockList.data;\n    if (stockBasicData && stockBasicData.length > 0) {\n        let tasks = [];\n        logger.info(\"个股主营业务数据更新准备...\");\n        for (let i = 0; i < stockBasicData.length; i++) {\n            tasks.push({\n                caller: updateStockInfoData,\n                args: [\n                    stockDataNames.financialMainbiz,\n                    stockBasicData[i].ts_code,\n                    force,\n                ],\n            });\n        }\n        logger.info(\"个股主营业务数据更新准备完毕！\");\n\n        if (tasks && tasks.length > 0) {\n            let workers = executeTasks(tasks, 30, \"个股主营业务数据任务\");\n            try {\n                logger.debug(\"等待个股主营业务数据更新队列完成...\");\n                await Promise.all(workers);\n                logger.info(tushare.showInfo());\n                logger.debug(\"个股主营业务数据更新队列全部执行完毕！\");\n            } catch (error) {\n                logger.error(`个股主营业务数据更新任务执行 错误！${error}`);\n            }\n        }\n    }\n}\n\nasync function readAndUpdateStockListInfoData(stockList, force) {\n    let stockBasicData = stockList && stockList.data;\n    if (stockBasicData && stockBasicData.length > 0) {\n        let totalStockWorkers = [];\n        logger.info(\"个股信息数据更新准备...\");\n        for (let i = 0; i < stockBasicData.length; i++) {\n            for (let j = 0; j < stockListInfoApiNames.length; j++) {\n                totalStockWorkers.push({\n                    caller: updateStockInfoData,\n                    args: [\n                        stockListInfoApiNames[j],\n                        stockBasicData[i].ts_code,\n                        force,\n                    ],\n                });\n            }\n        }\n        logger.info(\"个股信息数据更新准备完毕！\");\n\n        // let totalStockWorkers = [];\n        // let taskCount = 4;\n        // if (all) {\n        //     taskCount = 4;\n        // } else {\n        //     if (includeStock) taskCount++;\n        //     if (includeFactor) taskCount++;\n        //     if (includeBasic) taskCount++;\n        //     if (includeMoneyFlow) taskCount++;\n        // }\n        // 这里定义股票任务的序号，根据传入的参数决定\n        // let taskIndex = 0;\n        // // if (all || includeStock) {\n        // logger.info(\"股票日线数据更新准备...\");\n        // // 这里直接采用Promise的方式\n        // if (_.isArray(stockBasicData) && stockBasicData.length > 0) {\n        //     stockBasicData.forEach((item, index) => {\n        //         totalStockWorkers[index * taskCount + taskIndex] = {\n        //             caller: updateStockInfoData,\n        //             args: [stockDataNames.daily, item.ts_code, force],\n        //         };\n        //     });\n        // }\n        // logger.info(\"股票日线数据更新准备完毕!\");\n        // taskIndex++;\n        // // }\n        // // if (all || includeFactor) {\n        // logger.info(\"开始股票复权因子数据更新准备...\");\n        // // 这里直接采用Promise的方式\n        // if (_.isArray(stockBasicData) && stockBasicData.length > 0) {\n        //     stockBasicData.forEach((item, index) => {\n        //         totalStockWorkers[taskCount * index + taskIndex] = {\n        //             caller: updateStockInfoData,\n        //             args: [stockDataNames.adjustFactor, item.ts_code, force],\n        //         };\n        //     });\n        // }\n        // logger.info(\"股票复权因子更新准备完毕!\");\n        // taskIndex++;\n        // // }\n        // // if (all || includeBasic) {\n        // logger.info(\"基本面数据更新准备...\");\n        // // 这里直接采用Promise的方式\n        // if (_.isArray(stockBasicData) && stockBasicData.length > 0) {\n        //     stockBasicData.forEach((item, index) => {\n        //         totalStockWorkers[taskCount * index + taskIndex] = {\n        //             caller: updateStockInfoData,\n        //             args: [stockDataNames.dailyBasic, item.ts_code, force],\n        //         };\n        //     });\n        // }\n        // logger.info(\"股票基本面数据更新准备完毕!\");\n        // taskIndex++;\n        // // }\n        // // if (all || includeMoneyFlow) {\n        // logger.info(\"个股资金流向数据更新准备...\");\n        // // 这里直接采用Promise的方式\n        // if (_.isArray(stockBasicData) && stockBasicData.length > 0) {\n        //     stockBasicData.forEach((item, index) => {\n        //         totalStockWorkers[taskCount * index + taskIndex] = {\n        //             caller: updateStockInfoData,\n        //             args: [stockDataNames.moneyFlow, item.ts_code, force],\n        //         };\n        //     });\n        // }\n        // logger.info(\"个股资金流向数据更新准备完毕!\");\n        // taskIndex++;\n        // }\n        if (totalStockWorkers && totalStockWorkers.length > 0) {\n            let workers = executeTasks(\n                totalStockWorkers,\n                30,\n                \"个股数据更新任务\"\n            );\n            try {\n                logger.debug(\"等待个股数据更新队列完成...\");\n                await Promise.all(workers);\n                logger.info(tushare.showInfo());\n                logger.debug(\"个股数据更新队列全部执行完毕！\");\n            } catch (error) {\n                logger.error(`个股数据更新任务执行 错误！${error}`);\n            }\n        }\n    }\n}\n\nasync function updateListData(force) {\n    let now = moment();\n    // let endDate = now.format(\"YYYYMMDD\")\n\n    logger.info(\"获取和更新股票列表数据 ...\");\n    // 首先更新股票列表数据\n    let stockBasicData = await tushare.stockBasic();\n\n    let stockList = {\n        updateTime: now.toISOString(),\n        data: stockBasicData,\n    };\n    await saveListFile(stockList, STOCKLIST_FILE);\n    logger.info(\"股票列表数据更新完毕！\");\n\n    logger.info(\"获取和更新指数列表数据 ...\");\n    // 更新股票指数列表数据\n    let indexList = {\n        updateTime: now.toISOString(),\n        data: [],\n    };\n\n    let allIndexData = await Promise.all(\n        tushare.indexMarketList.map(async (market) => {\n            return tushare.indexBasic(market.code);\n        })\n    );\n\n    // logger.debug(\"所有指数请求返回！\", allIndexData && allIndexData.length)\n    if (allIndexData && allIndexData.length > 0) {\n        allIndexData.forEach((data) => {\n            // logger.debug(\"指数数据：\", data && data.length)\n            if (data && data.length > 0) {\n                // 合并之前做一次数据检查，对于已经终止的指数进行过滤\n                let total = data.length;\n                data = data.filter((item) => {\n                    return _.isEmpty(item.exp_date);\n                });\n                let filteredTotal = data.length;\n                logger.debug(`指数过滤，总共${total}, 剩余${filteredTotal}`);\n                indexList.data.push(...data);\n            }\n        });\n    }\n    // logger.debug(\"保存指数数据！\")\n    await saveListFile(indexList, INDEXLIST_FILE);\n    logger.info(\"更新指数列表数据完成！\");\n\n    return [stockList, indexList];\n}\n\n// /**\n//  * 更新指定代码的日历史数据\n//  * @param {string} tsCode 代码\n//  * @param {boolean} force 是否强制更新\n//  * @param {string} type 股票类型，S表示普通股票，I表示指数\n//  */\n// async function updateDailyData(tsCode, force = false, type = \"S\") {\n//     // logger.log(\"更新日线：\", tsCode, force)\n//     if (_.isEmpty(tsCode)) {\n//         return { data: [] };\n//     }\n//     if (type !== \"S\" && type !== \"I\") {\n//         return { data: [] };\n//     }\n\n//     // let tsCode = data.ts_code\n//     // logger.log(\"执行更新日线：\", tsCode, force)\n//     let dailyData;\n//     try {\n//         if (force) {\n//             logger.debug(`force update ${tsCode}`);\n//             let data;\n//             if (type === \"S\") {\n//                 data = await tushare.stockDaily(tsCode);\n//             } else {\n//                 data = await tushare.indexDaily(tsCode);\n//             }\n//             dailyData = {\n//                 updateTime: moment().toISOString(),\n//                 data,\n//             };\n//             logger.info(\n//                 `日线数据强制更新，代码 ${tsCode}, 更新时间：${\n//                     dailyData.updateTime\n//                 }, 总条数：${dailyData.data && dailyData.data.length}`\n//             );\n//         } else {\n//             dailyData = await readStockDaily(tsCode);\n\n//             let startDate = \"\";\n//             if (dailyData.data && dailyData.data.length > 0) {\n//                 let lastDate = dailyData.data[0].trade_date;\n//                 startDate = moment(lastDate, \"YYYYMMDD\")\n//                     .add(1, \"days\")\n//                     .format(\"YYYYMMDD\");\n//                 let now = moment();\n//                 if (now.diff(startDate, \"days\") <= 0 && now.hours() < 15) {\n//                     // 还没有最新一天的数据，不需要\n//                     logger.log(`没有新的数据，不需要更新 ${tsCode}`);\n//                     return;\n//                 }\n//             }\n\n//             let newData;\n//             if (type === \"S\") {\n//                 newData = await tushare.stockDaily(tsCode, startDate);\n//             } else {\n//                 newData = await tushare.indexDaily(tsCode, startDate);\n//             }\n//             if (newData && newData.length > 0) {\n//                 dailyData.updateTime = moment().toISOString();\n//                 dailyData.data.unshift(...newData);\n//                 logger.info(\n//                     `日线数据更新，代码 ${tsCode}, 更新时间：${\n//                         dailyData.updateTime\n//                     }, 更新条数：${newData && newData.length}，总条数：${\n//                         dailyData.data && dailyData.data.length\n//                     }`\n//                 );\n//             } else {\n//                 dailyData = null;\n//                 logger.info(`日线数据没有更新，代码 ${tsCode}`);\n//             }\n//         }\n//     } catch (error) {\n//         logger.error(`${tsCode} 日线数据更新时发生错误，${error}`);\n//         throw error;\n//     }\n\n//     try {\n//         if (dailyData) {\n//             await checkDataPath();\n\n//             let jsonStr = JSON.stringify(dailyData);\n//             let stockDailyFile = path.join(\n//                 getDataRoot(),\n//                 DATA_PATH.daily,\n//                 tsCode + \".json\"\n//             );\n//             await fp.writeFile(stockDailyFile, jsonStr, \"utf-8\");\n//         }\n//     } catch (error) {\n//         throw new Error(\n//             \"保存日线历史数据时出现错误，请检查后重新执行：\" +\n//                 tsCode +\n//                 \",\" +\n//                 error\n//         );\n//     }\n// }\n\n// /**\n//  * 更新指定代码的复权因子历史数据\n//  * @param {string} tsCode 代码\n//  * @param {boolean} force 是否强制更新\n//  */\n// async function updateAdjustFactorData(tsCode, force = false) {\n//     // logger.log(\"更新日线：\", tsCode, force)\n//     if (_.isEmpty(tsCode)) {\n//         return { data: [] };\n//     }\n\n//     // let tsCode = data.ts_code\n//     // logger.log(\"执行更新日线：\", tsCode, force)\n//     let adjData;\n//     try {\n//         if (force) {\n//             logger.debug(`force update ${tsCode}`);\n//             adjData = {\n//                 updateTime: moment().toISOString(),\n//                 data: await tushare.adjustFactor(tsCode),\n//             };\n\n//             logger.info(\n//                 `股票复权因子数据强制更新，代码 ${tsCode}, 总条数：${\n//                     adjData.data && adjData.data.length\n//                 }`\n//             );\n//         } else {\n//             adjData = await readStockAdjustFactor(tsCode);\n\n//             let startDate = \"\";\n//             if (adjData.data && adjData.data.length > 0) {\n//                 let lastDate = adjData.data[0].trade_date;\n//                 startDate = moment(lastDate, \"YYYYMMDD\")\n//                     .add(1, \"days\")\n//                     .format(\"YYYYMMDD\");\n//                 let now = moment();\n//                 if (now.diff(startDate, \"days\") <= 0 && now.hours() < 15) {\n//                     // 还没有最新一天的数据，不需要\n//                     logger.debug(`没有新的复权因子数据，不需要更新 ${tsCode}`);\n//                     return;\n//                 }\n//             }\n\n//             let newAdjData = await tushare.adjustFactor(tsCode, startDate);\n//             logger.debug(\n//                 `${tsCode} 复权因子数据返回：${newAdjData && newAdjData.length}`\n//             );\n//             if (newAdjData && newAdjData.length > 0) {\n//                 adjData.updateTime = moment().toISOString();\n//                 adjData.data.unshift(...newAdjData);\n//                 logger.info(\n//                     `日线复权因子数据更新，代码 ${tsCode}, 更新条数：${\n//                         newAdjData && newAdjData.length\n//                     }，总条数：${adjData.data && adjData.data.length}`\n//                 );\n//             } else {\n//                 adjData = null;\n//                 logger.info(`日线复权因子数据没有更新，代码 ${tsCode}`);\n//                 return;\n//             }\n//         }\n//     } catch (error) {\n//         logger.error(`${tsCode} 日线复权因子数据更新时发生错误，${error}`);\n//         throw error;\n//     }\n\n//     try {\n//         if (adjData && adjData.data && adjData.data.length > 0) {\n//             let jsonStr = JSON.stringify(adjData);\n//             let adjFile = path.join(\n//                 getDataRoot(),\n//                 DATA_PATH.daily,\n//                 tsCode + \".adj.json\"\n//             );\n//             await fp.writeFile(adjFile, jsonStr, \"utf-8\");\n//         }\n//     } catch (error) {\n//         throw new Error(\n//             \"保存复权因子数据时出现错误，请检查后重新执行：\" +\n//                 tsCode +\n//                 \",\" +\n//                 error\n//         );\n//     }\n// }\n\n// async function updateDailyBasicData(tsCode, force = false) {\n//     if (_.isEmpty(tsCode)) {\n//         return { data: [] };\n//     }\n\n//     let adjData;\n//     try {\n//         if (force) {\n//             logger.debug(`force update ${tsCode}`);\n//             adjData = {\n//                 updateTime: moment().toISOString(),\n//                 data: await tushare.dailyBasic(tsCode),\n//             };\n\n//             logger.info(\n//                 `股票基本面数据强制更新，代码 ${tsCode}, 总条数：${\n//                     adjData.data && adjData.data.length\n//                 }`\n//             );\n//         } else {\n//             adjData = await readStockDailyBasic(tsCode);\n\n//             let startDate = \"\";\n//             if (adjData && adjData.data && adjData.data.length > 0) {\n//                 let lastDate = adjData.data[0].trade_date;\n//                 startDate = moment(lastDate, \"YYYYMMDD\")\n//                     .add(1, \"days\")\n//                     .format(\"YYYYMMDD\");\n//                 let now = moment();\n//                 if (now.diff(startDate, \"days\") <= 0 && now.hours() < 15) {\n//                     // 还没有最新一天的数据，不需要\n//                     logger.debug(\n//                         `没有新的股票基本面数据，不需要更新 ${tsCode}`\n//                     );\n//                     return;\n//                 }\n//             }\n\n//             let newData = await tushare.dailyBasic(tsCode, startDate);\n//             logger.debug(\n//                 `${tsCode} 基本面数据返回：${newData && newData.length}`\n//             );\n//             if (newData && newData.length > 0) {\n//                 adjData.updateTime = moment().toISOString();\n//                 adjData.data.unshift(...newData);\n//                 logger.info(\n//                     `基本面数据更新，代码 ${tsCode}, 更新条数：${\n//                         newData && newData.length\n//                     }，总条数：${adjData.data && adjData.data.length}`\n//                 );\n//             } else {\n//                 adjData = null;\n//                 logger.info(`基本面数据没有更新，代码 ${tsCode}`);\n//                 return;\n//             }\n//         }\n//     } catch (error) {\n//         logger.error(`${tsCode} 基本面数据更新时发生错误，${error}`);\n//         throw error;\n//     }\n\n//     try {\n//         if (adjData && adjData.data && adjData.data.length > 0) {\n//             let jsonStr = JSON.stringify(adjData);\n//             let adjFile = path.join(\n//                 getDataRoot(),\n//                 DATA_PATH.info,\n//                 tsCode + \".basic.json\"\n//             );\n//             await fp.writeFile(adjFile, jsonStr, \"utf-8\");\n//         }\n//     } catch (error) {\n//         throw new Error(\n//             \"保存基本面数据时出现错误，请检查后重新执行：\" +\n//                 tsCode +\n//                 \",\" +\n//                 error\n//         );\n//     }\n// }\n\n// /**\n//  * 通过日期将复权因子数据合并到日线数据中，可以在后续的使用中直接使用\n//  * @param {Array} dailyData 日线数据\n//  * @param {Array} adjData 复权因子数据\n//  */\n// async function combineAdjustFactors(dailyData, adjData) {\n//     // let retData = [];\n//     if (dailyData && dailyData.length > 0) {\n//         dailyData = dailyData.map((daily) => {\n//             let findIndex = adjData.findIndex((adj, j) => {\n//                 return adj.trade_date === daily.trade_date;\n//             });\n//             if (findIndex >= 0 && findIndex < dailyData.length) {\n//                 let adj = adjData.splice(findIndex, 1)[0];\n//                 daily.adj_factor = adj.adj_factor;\n//                 // logger.debug(\n//                 //     `找到${daily.trade_date} 复权因子 ${adj.adj_factor}, %o`,\n//                 //     adj\n//                 // );\n//             } else {\n//                 logger.debug(`没有找到${daily.trade_date}的复权因子`);\n//             }\n//             return daily;\n//         });\n//     }\n//     return [dailyData, adjData];\n// }\n\n// async function saveStockList(data) {\n//     try {\n//         await checkDataPath()\n\n//         let jsonStr = JSON.stringify(data)\n//         let stockListPath = path.join(getDataRoot(), STOCKLIST_FILE)\n\n//         await fp.writeFile(stockListPath, jsonStr, {encoding: \"utf-8\"})\n//     } catch (error) {\n//         throw new Error(\"保存股票列表数据时出现错误，请检查后重新执行：\" + error)\n//     }\n// }\n\nasync function saveListFile(data, fileName) {\n    try {\n        // await checkDataPath();\n\n        let jsonStr = JSON.stringify(data);\n        let listPath = path.join(getDataRoot(), fileName);\n\n        await fp.writeFile(listPath, jsonStr, { encoding: \"utf-8\" });\n    } catch (error) {\n        throw new Error(\"保存列表数据时出现错误，请检查后重新执行：\" + error);\n    }\n}\n\n/**\n * 清除所有已经同步的数据\n */\nasync function clearAllData() {\n    try {\n        logger.debug(\"检查根目录状态：\");\n        // await checkDataPath();\n\n        // 首先删除股票列表信息文件\n        logger.info(\"清理股票列表数据...\");\n        let stockListPath = path.join(getDataRoot(), STOCKLIST_FILE);\n        try {\n            await fp.access(stockListPath, fs.constants.F_OK);\n            try {\n                await fp.unlink(stockListPath);\n            } catch (error) {\n                throw error;\n            }\n        } catch (error) {\n            // 文件不存在，直接忽略\n        }\n        logger.info(\"清理股票列表数据完成\");\n\n        logger.info(\"清理指数列表数据...\");\n        let indexListPath = path.join(getDataRoot(), INDEXLIST_FILE);\n        try {\n            await fp.access(indexListPath, fs.constants.F_OK);\n            try {\n                await fp.unlink(indexListPath);\n            } catch (error) {\n                throw error;\n            }\n        } catch (error) {\n            // 文件不存在，直接忽略\n        }\n        logger.info(\"清理指数列表数据完成\");\n\n        logger.info(\"清理股票历史数据...\");\n        // 下面删除股票历史数据目录\n        let stockDailyHistoryPath = path.join(getDataRoot(), DATA_PATH.daily);\n        try {\n            await fp.access(stockDailyHistoryPath, fs.constants.F_OK);\n\n            try {\n                let fileList = await fp.readdir(stockDailyHistoryPath);\n                logger.info(`共有${fileList.length}个历史数据文件待删除`);\n                fileList.forEach(async (filePath) => {\n                    // logger.log(\"to be remove: \", filePath)\n                    await fp.unlink(path.join(stockDailyHistoryPath, filePath));\n                });\n            } catch (error) {\n                throw error;\n            }\n        } catch (error) {\n            // 没有目录\n        }\n        logger.info(\"清理股票历史数据完成\");\n\n        logger.info(\"清理股票信息数据...\");\n        // 下面删除股票历史数据目录\n        let stockInfoPath = path.join(getDataRoot(), DATA_PATH.info);\n        try {\n            await fp.access(stockInfoPath, fs.constants.F_OK);\n\n            try {\n                let fileList = await fp.readdir(stockInfoPath);\n                logger.info(`共有${fileList.length}个历史数据文件待删除`);\n                fileList.forEach(async (filePath) => {\n                    // logger.log(\"to be remove: \", filePath)\n                    await fp.unlink(path.join(stockInfoPath, filePath));\n                });\n            } catch (error) {\n                throw error;\n            }\n        } catch (error) {\n            // 没有目录\n        }\n        logger.info(\"清理股票信息数据完成\");\n\n        logger.info(\"清理股票财务数据...\");\n        // 下面删除股票历史数据目录\n        let stockFinPath = path.join(getDataRoot(), DATA_PATH.financial);\n        try {\n            await fp.access(stockFinPath, fs.constants.F_OK);\n\n            try {\n                let fileList = await fp.readdir(stockFinPath);\n                logger.info(`共有${fileList.length}个历史数据文件待删除`);\n                fileList.forEach(async (filePath) => {\n                    // logger.log(\"to be remove: \", filePath)\n                    await fp.unlink(path.join(stockFinPath, filePath));\n                });\n            } catch (error) {\n                throw error;\n            }\n        } catch (error) {\n            // 没有目录\n        }\n        logger.info(\"清理股票财务数据完成\");\n    } catch (error) {\n        throw new Error(\"清除所有已经同步数据发生错误：\" + error);\n    }\n}\n\nexport {\n    clearAllData,\n    updateData,\n    updateStockInfoData,\n    // updateDailyData,\n    // updateAdjustFactorData,\n    // updateDailyBasicData,\n    stockDataNames,\n};\n"],"names":["_","require","os","path","fs","fp","promises","logger","pino","level","process","env","LOGGER","prettyPrint","levelFirst","translateTime","crlf","prettifier","DATA_PATH","daily","info","financial","getDataRoot","join","homedir","stockDataNames","adjustFactor","suspendInfo","dailyBasic","moneyFlow","indexDaily","income","balanceSheet","cashFlow","forecast","express","dividend","financialIndicator","financialMainbiz","disclosureDate","stockDataParams","name","ext","async","readStockData","dataName","tsCode","Error","isEmpty","retData","updateTime","data","checkDataPath","dataFile","getStockDataFile","JSON","parse","readFile","error","params","dataPath","access","constants","F_OK","R_OK","W_OK","debug","mkdir","recursive","key","Object","keys","tmpPath","moment","executeTasks","tushare","updateStockInfoData","force","stockData","endDate","startDate","queryStockInfo","toISOString","length","lastDate","add","format","now","diff","hours","log","newData","queryStartDate","unshift","jsonStr","stringify","stockDataFile","writeFile","stockListInfoApiNames","stockListFinancialApiNames","saveListFile","fileName","listPath","encoding","stockListPath","unlink","indexListPath","stockDailyHistoryPath","fileList","readdir","forEach","filePath","stockInfoPath","stockFinPath","stockIndexListPath","updateStock","updateFinance","updateMainbiz","updateIndex","stockList","indexList","stockBasicData","stockBasic","allIndexData","Promise","all","indexMarketList","map","indexBasic","market","code","total","filteredTotal","filter","item","exp_date","push","updateListData","totalStockWorkers","i","j","caller","args","ts_code","workers","showInfo","readAndUpdateStockListInfoData","tasks","readAndUpdateStockListFinancialData","readAndUpdateStockListMainbizData","readAndUpdateIndexListInfoData"],"mappings":"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"}