{"version":3,"file":"stockdata.js","sources":["src/stockdata-query.js","src/stockdata-update.js"],"sourcesContent":["/**\n * TODO:\n * 1. 数据结构（对应到本地或远程存储结构）\n *\n *\n * 股票数据访问层，主要用于计算和一些处理\n * 1. 后续会将数据的远程访问，本地访问在这里集成\n * 2.\n */\n\nconst _ = require(\"lodash\");\n\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst fp = fs.promises;\n\nconst pino = require(\"pino\");\n\nconst logger = pino({\n    level: process.env.LOGGER || \"info\",\n    prettyPrint: {\n        levelFirst: true,\n        translateTime: \"SYS:yyyy-mm-dd HH:MM:ss.l\",\n        crlf: true,\n    },\n    prettifier: require(\"pino-pretty\"),\n});\n\nconst DATA_PATH_ROOT = \".wtda\";\nconst DATA_PATH = {\n    daily: \"daily\",\n    info: \"info\",\n    financial: \"fin\",\n};\n\n// const DAILYHISTORY_PATH = \"daily\";\n// const INFO_PATH = \"info\";\nconst STOCKLIST_FILE = \"stock-list.json\";\nconst INDEXLIST_FILE = \"index-list.json\";\n\nfunction getDataRoot() {\n    return path.join(os.homedir(), DATA_PATH_ROOT);\n}\n\n/**\n * 读取目前可用的完整股票列表返回，返回数据为对象\n * {\n *    info: {\n *      updateTime,\n *      ...\n *    }\n *    data: stockList[]\n * }\n *\n * stockList: [{\n *    ts_code,\n *    symbol,\n *    name,\n *    area,\n *    industry,\n *    fullname,\n *    enname,\n *    market,\n *    exchange,\n *    curr_type,\n *    list_status,\n *    delist_date,\n *    is_hs\n * }]\n *\n */\nasync function readStockList() {\n    let retData = null;\n    try {\n        await checkDataPath();\n\n        // 首先从目录中读取对应的列表文件，然后根据文件当中的信息决定是否需要更新\n        let stockListPath = path.join(getDataRoot(), STOCKLIST_FILE);\n        retData = JSON.parse(await fp.readFile(stockListPath, \"utf-8\"));\n        if (!_.isEmpty(retData)) {\n            logger.debug(`股票列表更新时间 @${retData.updateTime}`);\n        }\n    } catch (error) {\n        logger.error(`读取股票列表数据错误：${error}`);\n        throw new Error(\n            \"读取股票列表过程中出现错误，请检查后重新运行：\" + error\n        );\n        // retData = null\n    }\n\n    if (_.isEmpty(retData)) {\n        // 读取数据不存在\n        return {\n            updateTime: \"\",\n            data: [],\n        };\n    }\n    return retData;\n}\n\nasync function readStockIndexList() {\n    let retData = null;\n    try {\n        await checkDataPath();\n\n        // 首先从目录中读取对应的列表文件，然后根据文件当中的信息决定是否需要更新\n        let stockIndexListPath = path.join(getDataRoot(), INDEXLIST_FILE);\n        retData = JSON.parse(await fp.readFile(stockIndexListPath, \"utf-8\"));\n        if (!_.isEmpty(retData)) {\n            logger.debug(`指数列表更新时间 @${retData.updateTime}`);\n        }\n    } catch (error) {\n        logger.error(`读取指数列表数据错误：${error}`);\n        throw new Error(\n            \"读取指数列表过程中出现错误，请检查后重新运行：\" + error\n        );\n        // retData = null\n    }\n\n    if (_.isEmpty(retData)) {\n        // 读取数据不存在\n        return {\n            updateTime: \"\",\n            data: [],\n        };\n    }\n    return retData;\n}\n\nconst stockDataNames = {\n    // 日数据\n    daily: \"daily\",\n    // 复权因子\n    adjustFactor: \"adjustFactor\",\n    // 停复牌信息\n    suspendInfo: \"suspendInfo\",\n    // 基本面信息\n    dailyBasic: \"dailyBasic\",\n    // 个股资金流向\n    moneyFlow: \"moneyFlow\",\n    // // 指数\n    // indexDailyBasic: \"indexDailyBasic\",\n    // 指数日线\n    indexDaily: \"indexDaily\",\n    // 利润表\n    income: \"income\",\n    // 负债表\n    balanceSheet: \"balanceSheet\",\n    // 现金流\n    cashFlow: \"cashFlow\",\n    // 业绩预告\n    forecast: \"forecast\",\n    // 业绩快报\n    express: \"express\",\n    // 分红送股\n    dividend: \"dividend\",\n    // 财务指标数据\n    financialIndicator: \"financialIndicator\",\n    // 主营业务构成\n    financialMainbiz: \"financialMainbiz\",\n    // 财报披露日期\n    disclosureDate: \"disclosureDate\",\n    // 股权质押统计\n    pledgeStat: \"pledgeStat\",\n    // 股权质押明细\n    pledgeDetail: \"pledgeDetail\",\n};\n\nconst stockDataParams = {\n    // 日数据\n    daily: { name: \"daily\", path: DATA_PATH.daily, ext: \"\" },\n    // 复权因子\n    adjustFactor: { name: \"adjustFactor\", path: DATA_PATH.daily, ext: \".adj\" },\n    // 停复牌信息\n    suspendInfo: { name: \"suspendInfo\", path: DATA_PATH.info, ext: \".sus\" },\n    // 基本面信息\n    dailyBasic: { name: \"dailyBasic\", path: DATA_PATH.info, ext: \".bsc\" },\n    // 个股资金流向\n    moneyFlow: { name: \"moneyFlow\", path: DATA_PATH.info, ext: \".mf\" },\n    // // 指数\n    // indexDailyBasic: \"indexDailyBasic\",\n    // 指数日线\n    indexDaily: { name: \"indexDaily\", path: DATA_PATH.daily, ext: \"\" },\n    // 利润表\n    income: { name: \"income\", path: DATA_PATH.financial, ext: \".ic\" },\n    // 负债表\n    balanceSheet: {\n        name: \"balanceSheet\",\n        path: DATA_PATH.financial,\n        ext: \".bs\",\n    },\n    // 现金流\n    cashFlow: { name: \"cashFlow\", path: DATA_PATH.financial, ext: \".cf\" },\n    // 业绩预告\n    forecast: { name: \"forecast\", path: DATA_PATH.financial, ext: \".fc\" },\n    // 业绩快报\n    express: { name: \"express\", path: DATA_PATH.financial, ext: \".ep\" },\n    // 分红送股，这个数据不能使用通用方式\n    dividend: { name: \"dividend\", path: DATA_PATH.financial, ext: \".dd\" },\n    // 财务指标数据\n    financialIndicator: {\n        name: \"financialIndicator\",\n        path: DATA_PATH.financial,\n        ext: \".id\",\n    },\n    // 主营业务构成\n    financialMainbiz: {\n        name: \"financialMainbiz\",\n        path: DATA_PATH.financial,\n        ext: \".mb\",\n    },\n    // 财报披露日期\n    disclosureDate: {\n        name: \"disclosureDate\",\n        path: DATA_PATH.financial,\n        ext: \".dt\",\n    },\n    // 股权质押统计\n    pledgeStat: { name: \"pledgeStat\", path: DATA_PATH.financial, ext: \".ps\" },\n    // 股权质押明细\n    pledgeDetail: {\n        name: \"pledgeDetail\",\n        path: DATA_PATH.financial,\n        ext: \".pd\",\n    },\n};\n\nasync function readStockData(dataName, tsCode) {\n    if (!stockDataNames[dataName]) {\n        throw new Error(\"不支持的数据类型：\" + dataName);\n    }\n    if (_.isEmpty(tsCode)) {\n        throw new Error(\"未设置读取股票代码\");\n    }\n    let retData = {\n        updateTime: null,\n        data: [],\n        // 下面考虑放个字段说明\n    };\n\n    let params = stockDataParams[dataName];\n    try {\n        await checkDataPath();\n\n        let dataFile = getStockDataFile(dataName, tsCode);\n        logger.debug(\n            `读取本地数据 ${tsCode}.${dataName}，参数配置 %o，文件 ${dataFile}`,\n            params\n        );\n        try {\n            retData = JSON.parse(await fp.readFile(dataFile, \"utf-8\"));\n        } catch (error) {\n            // 文件不存在，不考虑其它错误\n            logger.debug(`读取文件时发生错误：${error}`);\n            retData = { data: [] };\n        }\n    } catch (error) {\n        logger.error(`从本地读取个股数据${dataName}时发生错误 ${error}`);\n    }\n    return retData;\n}\n\nfunction getStockDataFile(dataName, tsCode) {\n    // logger.debug(`计算文件名：${dataName}, ${tsCode}`);\n    let params = stockDataParams[dataName];\n    // logger.debug(\"获取参数：%o\", params);\n    if (!params) {\n        throw new Error(\"不支持的数据类型\" + dataName);\n    }\n    if (_.isEmpty(tsCode)) {\n        throw new Error(\"未设置读取股票代码\");\n    }\n    return path.join(getDataRoot(), params.path, tsCode + params.ext + \".json\");\n}\n\nasync function checkDataPath() {\n    let dataPath = getDataRoot();\n\n    // 做基础的目录访问检查\n    try {\n        await fp.access(\n            dataPath,\n            fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK\n        );\n    } catch (error) {\n        logger.debug(`检查数据根目录错误 ${error}`);\n        await fp.mkdir(dataPath, { recursive: true });\n    }\n\n    for (let key of Object.keys(DATA_PATH)) {\n        let tmpPath = path.join(dataPath, DATA_PATH[key]);\n        try {\n            await fp.access(\n                tmpPath,\n                fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK\n            );\n        } catch (error) {\n            logger.debug(`检查目录${DATA_PATH[key]}错误 ${error}`);\n            await fp.mkdir(tmpPath, { recursive: true });\n        }\n    }\n}\n\ncheckDataPath();\n\nexport {\n    readStockData,\n    readStockList,\n    readStockIndexList,\n    // readStockDaily,\n    // readStockAdjustFactor,\n    // readStockDailyBasic,\n    // checkDataPath,\n    getDataRoot,\n    getStockDataFile,\n    // DATA_PATH_ROOT,\n    DATA_PATH,\n    STOCKLIST_FILE,\n    INDEXLIST_FILE,\n    stockDataNames,\n};\n","/**\n * TODO:\n * 1. 数据结构（对应到本地或远程存储结构）\n *\n *\n * 股票数据访问层，主要用于计算和一些处理\n * 1. 后续会将数据的远程访问，本地访问在这里集成\n * 2.\n */\n\nconst _ = require(\"lodash\");\nconst moment = require(\"moment\");\nconst executeTasks = require(\"@wt/lib-taskqueue\");\nconst tushare = require(\"@wt/lib-tushare\");\n\nconst pino = require(\"pino\");\n\nconst logger = pino({\n    level: process.env.LOGGER || \"info\",\n    prettyPrint: {\n        levelFirst: true,\n        translateTime: \"SYS:yyyy-mm-dd HH:MM:ss.l\",\n        crlf: true,\n    },\n    prettifier: require(\"pino-pretty\"),\n});\n\nimport {\n    readStockData,\n    getDataRoot,\n    getStockDataFile,\n    DATA_PATH,\n    STOCKLIST_FILE,\n    INDEXLIST_FILE,\n    stockDataNames,\n} from \"./stockdata-query\";\n\n// const os = require(\"os\")\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst fp = fs.promises;\n\nconst stockInfo2Names = {\n    [stockDataNames.dividend]: stockDataNames.dividend,\n    [stockDataNames.pledgeStat]: stockDataNames.pledgeStat,\n    [stockDataNames.pledgeDetail]: stockDataNames.pledgeDetail,\n};\n\n/**\n * 更新个股信息数据，包括个股的日数据，基本面，复权因子，财务相关的各种数据；\n *\n * @param {string} dataName 数据名称\n * @param {string} tsCode 股票代码\n * @param {boolean} force 是否强制全部更新\n */\nasync function updateStockInfoData(dataName, tsCode, force = false) {\n    // logger.log(\"更新日线：\", tsCode, force)\n\n    // dividend 比较特殊，单独调用\n    if (stockInfo2Names[dataName]) {\n        return updateStockInfo2Data(tsCode);\n    }\n\n    if (_.isEmpty(dataName) || !stockDataNames[dataName]) {\n        throw Error(\"请填写正确的个股数据名称！\" + dataName);\n    }\n    if (_.isEmpty(tsCode)) {\n        throw Error(`请填写正确的股票代码！${tsCode}`);\n    }\n\n    let stockData;\n    try {\n        if (force) {\n            logger.debug(`需要强制更新数据：${tsCode}`);\n            try {\n                let [data, endDate, startDate] = await tushare.queryStockInfo(\n                    dataName,\n                    tsCode\n                );\n\n                stockData = {\n                    updateTime: moment().toISOString(),\n                    startDate,\n                    endDate,\n                    data,\n                };\n                logger.info(\n                    `个股数据${dataName}强制更新，代码 ${tsCode}, 更新时间：${\n                        stockData.updateTime\n                    }, 更新时间范围: ${startDate} - ${endDate}, 总条数：${\n                        stockData.data && stockData.data.length\n                    }`\n                );\n            } catch (error) {\n                logger.error(\n                    `强制更新个股${tsCode}数据${dataName}时出现错误：${error}`\n                );\n                throw error;\n            }\n        } else {\n            stockData = await readStockData(dataName, tsCode);\n\n            logger.debug(\n                `读取本地数据${tsCode}.${dataName}：${stockData.updateTime}, ${\n                    stockData.startDate\n                }, ${stockData.endDate}, ${\n                    stockData.data && stockData.data.length\n                }`\n            );\n            let startDate = \"\";\n            if (stockData.data && stockData.data.length > 0) {\n                let lastDate = stockData.endDate;\n                startDate = moment(lastDate, \"YYYYMMDD\")\n                    .add(1, \"days\")\n                    .format(\"YYYYMMDD\");\n                let now = moment();\n                if (now.diff(startDate, \"days\") <= 0 && now.hours() < 15) {\n                    // 还没有最新一天的数据，不需要\n                    logger.log(`没有新的数据，不需要更新 ${tsCode}`);\n                    return;\n                }\n            }\n\n            let [\n                newData,\n                endDate,\n                queryStartDate,\n            ] = await tushare.queryStockInfo(dataName, tsCode, startDate);\n\n            // 如果通过查询获得的数据不存在，需要更新一下startDate\n            if (stockData && !stockData.startDate) {\n                stockData.startDate = queryStartDate;\n            }\n\n            if (newData && newData.length > 0) {\n                stockData.updateTime = moment().toISOString();\n                //stockData.startDate = startDate;\n                stockData.endDate = endDate;\n                stockData.data.unshift(...newData);\n                logger.info(\n                    `个股数据${dataName}更新，代码 ${tsCode}, 更新时间：${\n                        stockData.updateTime\n                    }, 更新时间范围: ${queryStartDate} - ${endDate}, 更新条数：${\n                        newData && newData.length\n                    }，总条数：${stockData.data && stockData.data.length}`\n                );\n            } else {\n                stockData = null;\n                logger.info(`个股数据${dataName}没有更新，代码 ${tsCode}`);\n            }\n        }\n    } catch (error) {\n        logger.error(`${tsCode} 个股数据${dataName}更新时发生错误，${error}`);\n        throw error;\n    }\n\n    try {\n        if (stockData && stockData.data && stockData.data.length > 0) {\n            // await checkDataPath();\n\n            let jsonStr = JSON.stringify(stockData);\n            let stockDataFile = getStockDataFile(dataName, tsCode);\n            logger.debug(\n                `保存个股${tsCode}数据${dataName}到：${stockDataFile}`\n            );\n            await fp.writeFile(stockDataFile, jsonStr, \"utf-8\");\n        }\n    } catch (error) {\n        throw new Error(\n            `保存个股${tsCode}数据${dataName}时出现错误，请检查后重新执行：${error}`\n        );\n    }\n}\n\n/**\n * 数据更新，如果force为true，则需要将所有数据更新为最新（相当于全部重新读取）\n * @param {boolean} force 强制更新所有数据，表示忽略本地数据，重新获取全部历史数据\n * @param {boolean} updateStock 是否更新个股日线数据，默认不更新\n * @param {boolean} updateFinance 是否更新个股财务数据，默认不更新\n * @param {boolean} updateIndex 是否更新指数信息，默认不更新\n */\nasync function updateData(\n    force = false,\n    updateStock = false,\n    updateFinance = false,\n    updateMainbiz = false,\n    updateDividend = false,\n    updatePledge = false,\n    updateIndex = false\n) {\n    logger.debug(\n        `参数：强制更新 ${force}, 更新股票信息数据 ${updateStock}, 更新股票财务数据 ${updateFinance}, 更新主营业务构成 ${updateMainbiz}, 更新分红送股 ${updateDividend}, 更新股权质押数据 ${updatePledge}，更新指数数据 ${updateIndex}`\n    );\n    // 首先读取和保存股票列表数据\n    let [stockList, indexList] = await updateListData(force);\n\n    if (updateStock) {\n        await readAndUpdateStockListInfoData(stockList, force);\n    }\n\n    if (updateFinance) {\n        await readAndUpdateStockListFinancialData(stockList, force);\n    }\n\n    if (updateMainbiz) {\n        await readAndUpdateStockListMainbizData(stockList, force);\n    }\n\n    if (updateDividend) {\n        await readAndUpdateStockListDividendData(stockList);\n    }\n\n    if (updatePledge) {\n        await readAndUpdateStockListPledgeData(stockList);\n    }\n\n    if (updateIndex) {\n        await readAndUpdateIndexListInfoData(indexList, force);\n    }\n}\n\nasync function readAndUpdateIndexListInfoData(indexList, force) {\n    if (indexList && indexList.data && indexList.data.length > 0) {\n        // if (all || includeIndex) {\n        logger.info(\"指数日线数据更新开始 ...\");\n        // if (_.isArray(indexList.data) && indexList.data.length > 0) {\n        let tasks = indexList.data.map((data) => {\n            return {\n                caller: updateStockInfoData,\n                args: [stockDataNames.indexDaily, data.ts_code, force],\n            };\n        });\n        let workers = executeTasks(tasks, 20, \"指数日线更新任务\");\n        try {\n            logger.debug(\"等待指数日线更新队列完成 ...\");\n            await Promise.all(workers);\n            logger.debug(\"指数日线数据更新队列全部完成！\");\n        } catch (error) {\n            logger.error(`指数日线任务执行 错误：%o`, error);\n        }\n        // }\n        logger.info(tushare.showInfo());\n        logger.info(\"指数日线数据更新完毕！\");\n    }\n}\n\nconst stockListInfoApiNames = [\n    stockDataNames.daily,\n    stockDataNames.adjustFactor,\n    stockDataNames.suspendInfo,\n    stockDataNames.dailyBasic,\n    stockDataNames.moneyFlow,\n];\n\nconst stockListFinancialApiNames = [\n    stockDataNames.income,\n    stockDataNames.balanceSheet,\n    stockDataNames.cashFlow,\n    stockDataNames.forecast,\n    stockDataNames.express,\n    // stockDataNames.dividend,\n    stockDataNames.financialIndicator,\n    // stockDataNames.financialMainbiz,\n    stockDataNames.disclosureDate,\n];\n\n/**\n * 读取并更新个股的财务数据\n * @param {Array} stockList 个股列表\n * @param {boolean} force 是否强制更新\n */\nasync function readAndUpdateStockListFinancialData(stockList, force) {\n    let stockBasicData = stockList && stockList.data;\n    if (stockBasicData && stockBasicData.length > 0) {\n        let tasks = [];\n        logger.info(\"个股财务数据更新准备...\");\n        for (let i = 0; i < stockBasicData.length; i++) {\n            for (let j = 0; j < stockListFinancialApiNames.length; j++) {\n                tasks.push({\n                    caller: updateStockInfoData,\n                    args: [\n                        stockListFinancialApiNames[j],\n                        stockBasicData[i].ts_code,\n                        force,\n                    ],\n                });\n            }\n        }\n        logger.info(\"个股财务数据更新准备完毕！\");\n\n        if (tasks && tasks.length > 0) {\n            let workers = executeTasks(tasks, 30, \"个股财务数据任务\");\n            try {\n                logger.debug(\"等待个股财务数据更新队列完成...\");\n                await Promise.all(workers);\n                logger.info(tushare.showInfo());\n                logger.debug(\"个股财务数据更新队列全部执行完毕！\");\n            } catch (error) {\n                logger.error(`个股财务数据更新任务执行 错误！${error}`);\n            }\n        }\n    }\n}\n\n/**\n * 读取并更新个股主营业务数据，这个数据接口流量限制较大，因此单独更新\n * @param {Array} stockList 个股列表\n * @param {boolean}} force 是否强制更新\n */\nasync function readAndUpdateStockListMainbizData(stockList, force) {\n    let stockBasicData = stockList && stockList.data;\n    if (stockBasicData && stockBasicData.length > 0) {\n        let tasks = [];\n        logger.info(\"个股主营业务数据更新准备...\");\n        for (let i = 0; i < stockBasicData.length; i++) {\n            tasks.push({\n                caller: updateStockInfoData,\n                args: [\n                    stockDataNames.financialMainbiz,\n                    stockBasicData[i].ts_code,\n                    force,\n                ],\n            });\n        }\n        logger.info(\"个股主营业务数据更新准备完毕！\");\n\n        if (tasks && tasks.length > 0) {\n            let workers = executeTasks(tasks, 30, \"个股主营业务数据任务\");\n            try {\n                logger.debug(\"等待个股主营业务数据更新队列完成...\");\n                await Promise.all(workers);\n                logger.info(tushare.showInfo());\n                logger.debug(\"个股主营业务数据更新队列全部执行完毕！\");\n            } catch (error) {\n                logger.error(`个股主营业务数据更新任务执行 错误！${error}`);\n            }\n        }\n    }\n}\n\nasync function readAndUpdateStockListDividendData(stockList) {\n    let stockBasicData = stockList && stockList.data;\n    if (stockBasicData && stockBasicData.length > 0) {\n        let tasks = [];\n        logger.info(\"个股分红送股数据更新准备...\");\n        for (let i = 0; i < stockBasicData.length; i++) {\n            tasks.push({\n                caller: updateStockInfo2Data,\n                args: [stockDataNames.dividend, stockBasicData[i].ts_code],\n            });\n        }\n        logger.info(\"个股分红送股数据更新准备完毕！\");\n\n        if (tasks && tasks.length > 0) {\n            let workers = executeTasks(tasks, 20, \"个股分红送股数据任务\");\n            try {\n                logger.debug(\"等待个股分红送股数据更新队列完成...\");\n                await Promise.all(workers);\n                logger.info(tushare.showInfo());\n                logger.debug(\"个股分红送股数据更新队列全部执行完毕！\");\n            } catch (error) {\n                logger.error(`个股分红送股数据更新任务执行 错误！${error}`);\n            }\n        }\n    }\n}\n\nasync function readAndUpdateStockListPledgeData(stockList) {\n    let stockBasicData = stockList && stockList.data;\n    if (stockBasicData && stockBasicData.length > 0) {\n        let tasks = [];\n        logger.info(\"个股股权质押数据更新准备...\");\n        for (let i = 0; i < stockBasicData.length; i++) {\n            tasks.push({\n                caller: updateStockInfo2Data,\n                args: [stockDataNames.pledgeStat, stockBasicData[i].ts_code],\n            });\n            tasks.push({\n                caller: updateStockInfo2Data,\n                args: [stockDataNames.pledgeDetail, stockBasicData[i].ts_code],\n            });\n        }\n        logger.info(\"个股股权质押数据更新准备完毕！\");\n\n        if (tasks && tasks.length > 0) {\n            let workers = executeTasks(tasks, 20, \"个股股权质押数据任务\");\n            try {\n                logger.debug(\"等待个股股权质押数据更新队列完成...\");\n                await Promise.all(workers);\n                logger.info(tushare.showInfo());\n                logger.debug(\"个股股权质押数据更新队列全部执行完毕！\");\n            } catch (error) {\n                logger.error(`个股股权质押数据更新任务执行 错误！${error}`);\n            }\n        }\n    }\n}\n\n/**\n * 读取并更新个股信息数据\n * @param {Array} stockList 个股列表\n * @param {boolean} force 是否强制更新\n */\nasync function readAndUpdateStockListInfoData(stockList, force) {\n    let stockBasicData = stockList && stockList.data;\n    if (stockBasicData && stockBasicData.length > 0) {\n        let totalStockWorkers = [];\n        logger.info(\"个股信息数据更新准备...\");\n        for (let i = 0; i < stockBasicData.length; i++) {\n            for (let j = 0; j < stockListInfoApiNames.length; j++) {\n                totalStockWorkers.push({\n                    caller: updateStockInfoData,\n                    args: [\n                        stockListInfoApiNames[j],\n                        stockBasicData[i].ts_code,\n                        force,\n                    ],\n                });\n            }\n        }\n        logger.info(\"个股信息数据更新准备完毕！\");\n        if (totalStockWorkers && totalStockWorkers.length > 0) {\n            let workers = executeTasks(\n                totalStockWorkers,\n                30,\n                \"个股数据更新任务\"\n            );\n            try {\n                logger.debug(\"等待个股数据更新队列完成...\");\n                await Promise.all(workers);\n                logger.info(tushare.showInfo());\n                logger.debug(\"个股数据更新队列全部执行完毕！\");\n            } catch (error) {\n                logger.error(`个股数据更新任务执行 错误！${error}`);\n            }\n        }\n    }\n}\n\n/**\n * 更新股票和指数列表信息\n * @param {boolean} force 是否强制更新\n */\nasync function updateListData(force) {\n    let now = moment();\n    // let endDate = now.format(\"YYYYMMDD\")\n\n    logger.info(\"获取和更新股票列表数据 ...\");\n    // 首先更新股票列表数据\n    let stockBasicData = await tushare.stockBasic();\n\n    let stockList = {\n        updateTime: now.toISOString(),\n        data: stockBasicData,\n    };\n    await saveListFile(stockList, STOCKLIST_FILE);\n    logger.info(\"股票列表数据更新完毕！\");\n\n    logger.info(\"获取和更新指数列表数据 ...\");\n    // 更新股票指数列表数据\n    let indexList = {\n        updateTime: now.toISOString(),\n        data: [],\n    };\n\n    let allIndexData = await Promise.all(\n        tushare.indexMarketList.map(async (market) => {\n            return tushare.indexBasic(market.code);\n        })\n    );\n\n    // logger.debug(\"所有指数请求返回！\", allIndexData && allIndexData.length)\n    if (allIndexData && allIndexData.length > 0) {\n        allIndexData.forEach((data) => {\n            // logger.debug(\"指数数据：\", data && data.length)\n            if (data && data.length > 0) {\n                // 合并之前做一次数据检查，对于已经终止的指数进行过滤\n                let total = data.length;\n                data = data.filter((item) => {\n                    return _.isEmpty(item.exp_date);\n                });\n                let filteredTotal = data.length;\n                logger.debug(`指数过滤，总共${total}, 剩余${filteredTotal}`);\n                indexList.data.push(...data);\n            }\n        });\n    }\n    // logger.debug(\"保存指数数据！\")\n    await saveListFile(indexList, INDEXLIST_FILE);\n    logger.info(\"更新指数列表数据完成！\");\n\n    return [stockList, indexList];\n}\n\nasync function updateStockInfo2Data(dataName, tsCode) {\n    let now = moment();\n\n    if (_.isEmpty(tsCode)) {\n        throw new Error(`没有设置查询${dataName}的个股代码`);\n    }\n\n    logger.info(`个股${tsCode}获取和更新${dataName}数据 ...`);\n    // 首先更新股票列表数据\n    let data = await tushare.queryStockInfo(dataName, tsCode);\n    let stockData = {\n        updateTime: now.toISOString(),\n        data,\n    };\n    logger.info(\n        `个股${tsCode} 数据${dataName}更新，更新时间：${\n            stockData.updateTime\n        }, 总条数：${stockData.data && stockData.data.length}`\n    );\n\n    try {\n        if (stockData && stockData.data && stockData.data.length > 0) {\n            let jsonStr = JSON.stringify(stockData);\n            let stockDataFile = getStockDataFile(dataName, tsCode);\n            logger.debug(\n                `保存个股${tsCode}数据${dataName}到：${stockDataFile}`\n            );\n            await fp.writeFile(stockDataFile, jsonStr, \"utf-8\");\n        }\n    } catch (error) {\n        logger.error(`保存个股${tsCode}数据${dataName}错误：${error}`);\n        throw new Error(\n            `保存个股${tsCode}数据${dataName}时出现错误，请检查后重新执行：${error}`\n        );\n    }\n}\n\n/**\n * 保存列表数据到指定文件\n * @param {object} data 列表数据\n * @param {string} fileName 文件名\n */\nasync function saveListFile(data, fileName) {\n    try {\n        // await checkDataPath();\n\n        let jsonStr = JSON.stringify(data);\n        let listPath = path.join(getDataRoot(), fileName);\n\n        await fp.writeFile(listPath, jsonStr, { encoding: \"utf-8\" });\n    } catch (error) {\n        throw new Error(\"保存列表数据时出现错误，请检查后重新执行：\" + error);\n    }\n}\n\n/**\n * 清除所有已经同步的数据\n */\nasync function clearAllData() {\n    try {\n        logger.debug(\"检查根目录状态：\");\n        // await checkDataPath();\n\n        // 首先删除股票列表信息文件\n        logger.info(\"清理股票列表数据...\");\n        let stockListPath = path.join(getDataRoot(), STOCKLIST_FILE);\n        try {\n            await fp.access(stockListPath, fs.constants.F_OK);\n            try {\n                await fp.unlink(stockListPath);\n            } catch (error) {\n                throw error;\n            }\n        } catch (error) {\n            // 文件不存在，直接忽略\n        }\n        logger.info(\"清理股票列表数据完成\");\n\n        logger.info(\"清理指数列表数据...\");\n        let indexListPath = path.join(getDataRoot(), INDEXLIST_FILE);\n        try {\n            await fp.access(indexListPath, fs.constants.F_OK);\n            try {\n                await fp.unlink(indexListPath);\n            } catch (error) {\n                throw error;\n            }\n        } catch (error) {\n            // 文件不存在，直接忽略\n        }\n        logger.info(\"清理指数列表数据完成\");\n\n        logger.info(\"清理股票历史数据...\");\n        // 下面删除股票历史数据目录\n        let stockDailyHistoryPath = path.join(getDataRoot(), DATA_PATH.daily);\n        try {\n            await fp.access(stockDailyHistoryPath, fs.constants.F_OK);\n\n            try {\n                let fileList = await fp.readdir(stockDailyHistoryPath);\n                logger.info(`共有${fileList.length}个历史数据文件待删除`);\n                fileList.forEach(async (filePath) => {\n                    // logger.log(\"to be remove: \", filePath)\n                    await fp.unlink(path.join(stockDailyHistoryPath, filePath));\n                });\n            } catch (error) {\n                throw error;\n            }\n        } catch (error) {\n            // 没有目录\n        }\n        logger.info(\"清理股票历史数据完成\");\n\n        logger.info(\"清理股票信息数据...\");\n        // 下面删除股票历史数据目录\n        let stockInfoPath = path.join(getDataRoot(), DATA_PATH.info);\n        try {\n            await fp.access(stockInfoPath, fs.constants.F_OK);\n\n            try {\n                let fileList = await fp.readdir(stockInfoPath);\n                logger.info(`共有${fileList.length}个历史数据文件待删除`);\n                fileList.forEach(async (filePath) => {\n                    // logger.log(\"to be remove: \", filePath)\n                    await fp.unlink(path.join(stockInfoPath, filePath));\n                });\n            } catch (error) {\n                throw error;\n            }\n        } catch (error) {\n            // 没有目录\n        }\n        logger.info(\"清理股票信息数据完成\");\n\n        logger.info(\"清理股票财务数据...\");\n        // 下面删除股票历史数据目录\n        let stockFinPath = path.join(getDataRoot(), DATA_PATH.financial);\n        try {\n            await fp.access(stockFinPath, fs.constants.F_OK);\n\n            try {\n                let fileList = await fp.readdir(stockFinPath);\n                logger.info(`共有${fileList.length}个历史数据文件待删除`);\n                fileList.forEach(async (filePath) => {\n                    // logger.log(\"to be remove: \", filePath)\n                    await fp.unlink(path.join(stockFinPath, filePath));\n                });\n            } catch (error) {\n                throw error;\n            }\n        } catch (error) {\n            // 没有目录\n        }\n        logger.info(\"清理股票财务数据完成\");\n    } catch (error) {\n        throw new Error(\"清除所有已经同步数据发生错误：\" + error);\n    }\n}\n\nexport {\n    clearAllData,\n    updateData,\n    updateStockInfoData,\n    // updateStockDividendData,\n    stockDataNames,\n};\n"],"names":["_","require","os","path","fs","fp","promises","logger","pino","level","process","env","LOGGER","prettyPrint","levelFirst","translateTime","crlf","prettifier","DATA_PATH","daily","info","financial","getDataRoot","join","homedir","stockDataNames","adjustFactor","suspendInfo","dailyBasic","moneyFlow","indexDaily","income","balanceSheet","cashFlow","forecast","express","dividend","financialIndicator","financialMainbiz","disclosureDate","pledgeStat","pledgeDetail","stockDataParams","name","ext","async","readStockData","dataName","tsCode","Error","isEmpty","retData","updateTime","data","params","checkDataPath","dataFile","getStockDataFile","debug","JSON","parse","readFile","error","dataPath","access","constants","F_OK","R_OK","W_OK","mkdir","recursive","key","Object","keys","tmpPath","moment","executeTasks","tushare","stockInfo2Names","updateStockInfoData","force","updateStockInfo2Data","stockData","endDate","startDate","queryStockInfo","toISOString","length","lastDate","add","format","now","diff","hours","log","newData","queryStartDate","unshift","jsonStr","stringify","stockDataFile","writeFile","stockListInfoApiNames","stockListFinancialApiNames","saveListFile","fileName","listPath","encoding","stockListPath","unlink","indexListPath","stockDailyHistoryPath","fileList","readdir","forEach","filePath","stockInfoPath","stockFinPath","stockIndexListPath","updateStock","updateFinance","updateMainbiz","updateDividend","updatePledge","updateIndex","stockList","indexList","stockBasicData","stockBasic","allIndexData","Promise","all","indexMarketList","map","indexBasic","market","code","total","filteredTotal","filter","item","exp_date","push","updateListData","totalStockWorkers","i","j","caller","args","ts_code","workers","showInfo","readAndUpdateStockListInfoData","tasks","readAndUpdateStockListFinancialData","readAndUpdateStockListMainbizData","readAndUpdateStockListDividendData","readAndUpdateStockListPledgeData","readAndUpdateIndexListInfoData"],"mappings":"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"}