const{readStockList:t,readStockData:a,getDataRoot:e,getStockDataFile:n,DATA_PATH:i,STOCKLIST_FILE:r,INDEXLIST_FILE:o,stockDataNames:l}=require("@wt/lib-wtda-query"),d=require("lodash"),c=require("moment"),f=require("@wt/lib-taskqueue"),s=require("@wt/lib-tushare"),h=require("pino")({level:process.env.LOGGER||"info",prettyPrint:{levelFirst:!0,translateTime:"SYS:yyyy-mm-dd HH:MM:ss.l",crlf:!0},prettifier:require("pino-pretty")}),g=require("path"),u=require("fs"),$=u.promises,w={[l.dividend]:l.dividend,[l.pledgeStat]:l.pledgeStat,[l.pledgeDetail]:l.pledgeDetail};async function y(t,e,n=!1){if(w[t])return D(e);if(d.isEmpty(t)||!l[t])throw Error("请填写正确的个股数据名称！"+t);if(d.isEmpty(e))throw Error("请填写正确的股票代码！"+e);let i;try{if(n){h.debug("需要强制更新数据："+e);try{let[a,n,r]=await s.queryStockInfo(t,e);i={updateTime:c().toISOString(),startDate:r,endDate:n,data:a},h.info(`个股数据${t}强制更新，代码 ${e}, 更新时间：${i.updateTime}, 更新时间范围: ${r} - ${n}, 总条数：${i.data&&i.data.length}`)}catch(a){throw h.error(`强制更新个股${e}数据${t}时出现错误：${a}`),a}}else{i=await a(t,e),h.debug(`读取本地数据${e}.${t}：${i.updateTime}, ${i.startDate}, ${i.endDate}, ${i.data&&i.data.length}`);let n=null;if(i.data&&i.data.length>0){let a=i.endDate;n=c(a,"YYYYMMDD").add(1,"days").format("YYYYMMDD");let r=c();if(r.diff(n,"days")<=0&&r.hours()<15)return void h.info(`${e}没有新的数据${t}，不需要更新, 已有数据${i.data&&i.data.length}条`,i)}h.info(`${e}查询数据${t}，参数：${n}`);let[r,o,l]=await s.queryStockInfo(t,e,n);h.info(`${e}查询数据${t}，参数：${n}，返回：${r&&r.length}条，${o}, ${l}`),i&&!i.startDate&&(i.startDate=l),r&&r.length>0?(i.updateTime=c().toISOString(),i.endDate=o,i.data.unshift(...r),h.info(`个股数据${t}更新，代码 ${e}, 更新时间：${i.updateTime}, 更新时间范围: ${l} - ${o}, 更新条数：${r&&r.length}，总条数：${i.data&&i.data.length}`)):(i=null,h.info(`个股数据${t}没有更新，代码 ${e}`))}}catch(a){throw h.error(`${e} 个股数据${t}更新时发生错误，${a}`),a}await p(i,t,e)}async function p(t,a,e){try{if(t&&t.data&&t.data.length>0){let i=JSON.stringify(t),r=n(a,e);h.debug(`保存个股${e}数据${a}到：${r}`),await $.writeFile(r,i,"utf-8")}}catch(t){throw new Error(`保存个股${e}数据${a}时出现错误，请检查后重新执行：${t}`)}}async function m(t=!1,a=!1,e=!1,n=!1,i=!1,g=!1,u=!1,$=!1){h.info(`参数：强制更新 ${t}, 更新股票日线数据 ${a}, 更新股票信息数据 ${e}, 更新股票财务数据 ${n}, 更新主营业务构成 ${i}, 更新分红送股 ${g}, 更新股权质押数据 ${u}，更新指数数据 ${$}`);let[w,p]=await async function(t){let a=c();h.info("获取和更新股票列表数据 ...");let e=await s.stockBasic(),n={updateTime:a.toISOString(),data:e};await j(n,r),h.info("股票列表数据更新完毕！"),h.info("获取和更新指数列表数据 ...");let i={updateTime:a.toISOString(),data:[]},l=await Promise.all(s.indexMarketList.map(async t=>s.indexBasic(t.code)));l&&l.length>0&&l.forEach(t=>{if(t&&t.length>0){let a=t.length,e=(t=t.filter(t=>d.isEmpty(t.exp_date))).length;h.debug(`指数过滤，总共${a}, 剩余${e}`),i.data.push(...t)}});return await j(i,o),h.info("更新指数列表数据完成！"),[n,i]}();a&&await async function(t,a){let e=t&&t.data;if(e&&e.length>0){let t=[];h.info("个股日线数据更新准备...");for(let n=0;n<e.length;n++)for(let i=0;i<b.length;i++)t.push({caller:y,args:[_[i],e[n].ts_code,a]});if(h.info("个股日线数据更新准备完毕！"),t&&t.length>0){let a=f(t,30,"个股日线数据更新任务");try{h.debug("等待个股日线数据更新队列完成..."),await Promise.all(a),h.info(s.showInfo()),h.debug("个股日线数据更新队列全部执行完毕！")}catch(t){h.error("个股日线数据更新任务执行 错误！"+t)}}}}(w,t),e&&await async function(t,a){let e=t&&t.data;if(e&&e.length>0){let t=[];h.info("个股信息数据更新准备...");for(let n=0;n<e.length;n++)for(let i=0;i<_.length;i++)t.push({caller:y,args:[_[i],e[n].ts_code,a]});if(h.info("个股信息数据更新准备完毕！"),t&&t.length>0){let a=f(t,30,"个股数据更新任务");try{h.debug("等待个股数据更新队列完成..."),await Promise.all(a),h.info(s.showInfo()),h.debug("个股数据更新队列全部执行完毕！")}catch(t){h.error("个股数据更新任务执行 错误！"+t)}}}}(w,t),n&&await async function(t,a){let e=t&&t.data;if(e&&e.length>0){let t=[];h.info("个股财务数据更新准备...");for(let n=0;n<e.length;n++)for(let i=0;i<S.length;i++)t.push({caller:y,args:[S[i],e[n].ts_code,a]});if(h.info("个股财务数据更新准备完毕！"),t&&t.length>0){let a=f(t,30,"个股财务数据任务");try{h.debug("等待个股财务数据更新队列完成..."),await Promise.all(a),h.info(s.showInfo()),h.debug("个股财务数据更新队列全部执行完毕！")}catch(t){h.error("个股财务数据更新任务执行 错误！"+t)}}}}(w,t),i&&await async function(t,a){let e=t&&t.data;if(e&&e.length>0){let t=[];h.info("个股主营业务数据更新准备...");for(let n=0;n<e.length;n++)t.push({caller:y,args:[l.financialMainbiz,e[n].ts_code,a]});if(h.info("个股主营业务数据更新准备完毕！"),t&&t.length>0){let a=f(t,30,"个股主营业务数据任务");try{h.debug("等待个股主营业务数据更新队列完成..."),await Promise.all(a),h.info(s.showInfo()),h.debug("个股主营业务数据更新队列全部执行完毕！")}catch(t){h.error("个股主营业务数据更新任务执行 错误！"+t)}}}}(w,t),g&&await async function(t){let a=t&&t.data;if(a&&a.length>0){let t=[];h.info("个股分红送股数据更新准备...");for(let e=0;e<a.length;e++)t.push({caller:D,args:[l.dividend,a[e].ts_code]});if(h.info("个股分红送股数据更新准备完毕！"),t&&t.length>0){let a=f(t,20,"个股分红送股数据任务");try{h.debug("等待个股分红送股数据更新队列完成..."),await Promise.all(a),h.info(s.showInfo()),h.debug("个股分红送股数据更新队列全部执行完毕！")}catch(t){h.error("个股分红送股数据更新任务执行 错误！"+t)}}}}(w),u&&await async function(t){let a=t&&t.data;if(a&&a.length>0){let t=[];h.info("个股股权质押数据更新准备...");for(let e=0;e<a.length;e++)t.push({caller:D,args:[l.pledgeStat,a[e].ts_code]}),t.push({caller:D,args:[l.pledgeDetail,a[e].ts_code]});if(h.info("个股股权质押数据更新准备完毕！"),t&&t.length>0){let a=f(t,20,"个股股权质押数据任务");try{h.debug("等待个股股权质押数据更新队列完成..."),await Promise.all(a),h.info(s.showInfo()),h.debug("个股股权质押数据更新队列全部执行完毕！")}catch(t){h.error("个股股权质押数据更新任务执行 错误！"+t)}}}}(w),$&&await async function(t,a){if(t&&t.data&&t.data.length>0){h.info("指数日线数据更新开始 ...");let e=t.data.map(t=>({caller:y,args:[l.indexDaily,t.ts_code,a]})),n=f(e,20,"指数日线更新任务");try{h.debug("等待指数日线更新队列完成 ..."),await Promise.all(n),h.debug("指数日线数据更新队列全部完成！")}catch(t){h.error("指数日线任务执行 错误：%o",t)}h.info(s.showInfo()),h.info("指数日线数据更新完毕！")}}(p,t)}const b=[l.daily,l.adjustFactor],_=[l.daily,l.adjustFactor,l.suspendInfo,l.dailyBasic,l.moneyFlow],S=[l.income,l.balanceSheet,l.cashFlow,l.forecast,l.express,l.financialIndicator,l.disclosureDate];async function D(t,a){let e=c();if(d.isEmpty(a))throw new Error(`没有设置查询${t}的个股代码`);h.info(`个股${a}获取和更新${t}数据 ...`);let i=await s.queryStockInfo(t,a),r={updateTime:e.toISOString(),data:i};h.info(`个股${a} 数据${t}更新，更新时间：${r.updateTime}, 总条数：${r.data&&r.data.length}`);try{if(r&&r.data&&r.data.length>0){let e=JSON.stringify(r),i=n(t,a);h.debug(`保存个股${a}数据${t}到：${i}`),await $.writeFile(i,e,"utf-8")}}catch(e){throw h.error(`保存个股${a}数据${t}错误：${e}`),new Error(`保存个股${a}数据${t}时出现错误，请检查后重新执行：${e}`)}}async function j(t,a){try{let n=JSON.stringify(t),i=g.join(e(),a);await $.writeFile(i,n,{encoding:"utf-8"})}catch(t){throw new Error("保存列表数据时出现错误，请检查后重新执行："+t)}}async function F(){try{h.debug("检查根目录状态："),h.info("清理股票列表数据...");let t=g.join(e(),r);try{await $.access(t,u.constants.F_OK);try{await $.unlink(t)}catch(t){throw t}}catch(t){}h.info("清理股票列表数据完成"),h.info("清理指数列表数据...");let a=g.join(e(),o);try{await $.access(a,u.constants.F_OK);try{await $.unlink(a)}catch(t){throw t}}catch(t){}h.info("清理指数列表数据完成"),h.info("清理股票历史数据...");let n=g.join(e(),i.daily);try{await $.access(n,u.constants.F_OK);try{let t=await $.readdir(n);h.info(`共有${t.length}个历史数据文件待删除`),t.forEach(async t=>{await $.unlink(g.join(n,t))})}catch(t){throw t}}catch(t){}h.info("清理股票历史数据完成"),h.info("清理股票信息数据...");let l=g.join(e(),i.info);try{await $.access(l,u.constants.F_OK);try{let t=await $.readdir(l);h.info(`共有${t.length}个历史数据文件待删除`),t.forEach(async t=>{await $.unlink(g.join(l,t))})}catch(t){throw t}}catch(t){}h.info("清理股票信息数据完成"),h.info("清理股票财务数据...");let d=g.join(e(),i.financial);try{await $.access(d,u.constants.F_OK);try{let t=await $.readdir(d);h.info(`共有${t.length}个历史数据文件待删除`),t.forEach(async t=>{await $.unlink(g.join(d,t))})}catch(t){throw t}}catch(t){}h.info("清理股票财务数据完成")}catch(t){throw new Error("清除所有已经同步数据发生错误："+t)}}async function E(){let a=await t();if(!a||!a.data)return void h.error("没有读取到股票列表，无法处理日线数据");let e=a.data.map(t=>({caller:I,args:[t.ts_code]}));if(e&&e.length>0){let t=f(e,30,"日线数据合并");try{await Promise.all(t)}catch(t){h.error("日线数据合并任务执行发生未知异常："+t)}}}async function I(t){if(d.isEmpty(t))return;let e=await a(l.daily,t);h.debug(`日线${t}读取到${e.data.length}条数据`);let n=await a(l.adjustFactor,t);h.debug(`复权因子${t}读取到${n.data.length}条数据`);let i=n&&n.data&&n.data.length>0?n.data[0].adj_factor:1;h.debug(`${t}最新复权因子: ${i}`),e&&e.data&&e.data.length>0&&(e.data=e.data.map(t=>{let a=n.data.filter(a=>a.trade_date===t.trade_date);return h.debug(t.trade_date+", 寻找到adj：%o",a),a&&a.length>0&&(t.adj_factor=a[0].adj_factor,t.prevadj_factor=a[0].adj_factor/i),t})),await p(e,l.daily,t),h.info(t+"日线数据合并完成！")}function v(t){let a=[];for(let e=1;e<t.length-1;e++){let n=t[e],i=null,r=a.length>0?a[a.length-1]:null,o=null!==r?r[2]:0;h.debug(`执行检查 序号：${e}， %o, 前一点 %o, 后一点 %o, 前2点 %o, 后2点 %o`,n,t[e-1],t[e+1],t[e-2],t[e+2]),(0===n[2]&&n[3]>=t[e-1][3]&&n[3]>=t[e+1][3]||1===n[2]&&e-2>=0&&e+2<t.length&&n[1]>=t[e-2][1]&&n[1]>=t[e+2][1])&&(i=[n[0],n[3],1,n[3],n[4]],h.debug(`找到高点，序号${e}, %o`,n),1===o&&(h.debug(`前一个点也是高点：, 当前序号${e}, 当前点：%o, 上一个点：%o`,i,r),r[1]<i[1]?(h.debug("当前点价格更高，替换前一个点！"),a[a.length-1]=i):h.debug("之前的高点比当前点高，忽略这次发现的高点"),i=null)),(0===n[2]&&n[4]<=t[e-1][4]&&n[4]<=t[e+1][4]||-1===n[2]&&e-2>=0&&e+2<t.length&&n[1]<=t[e-2][1]&&n[1]<=t[e+2][1])&&(i=[n[0],n[4],-1,n[3],n[4]],h.debug(`发现低点，序号${e}, %o`,n),-1===o&&(h.debug(`前一个点也是低点，当前序号${e}, 当前点：%o, 上一个点：%o`,i,r),r[1]>i[1]?(h.debug("当前点比上一个点价格更低，替换上一个点！"),a[a.length-1]=i):h.debug("当前点比上一个点价格高，忽略这次发现的低点！"),i=null)),null!==i&&a.push(i)}return a}async function O(t){if(d.isEmpty(t))return;let e=await a(l.daily,t);!function(t,a=3){t&&t.data&&t.data.length>0&&t.data.forEach(t=>{t.prevadj_factor&&(t.open=Number((t.open*t.prevadj_factor).toFixed(a)),t.close=Number((t.close*t.prevadj_factor).toFixed(a)),t.high=Number((t.high*t.prevadj_factor).toFixed(a)),t.low=Number((t.low*t.prevadj_factor).toFixed(a)),t.pre_close=Number((t.pre_close*t.prevadj_factor).toFixed(a)),t.change=Number((t.change*t.prevadj_factor).toFixed(a)))})}(e),h.debug("去除内移交易日..., "+(e&&e.data&&e.data.length));let i=function(t){let a=[];if(!t||!Array.isArray(t))return a;if(t.length<=0)return a;let e=t.length-1,n=t[e],i=e-1;for(;i>=0;){let r=t[i];if(r){if(r.high<=n.high&&r.low>=n.low);else{let t=[r.trade_date,null,0,r.high,r.low];a.push(t),e=i,n=r}i-=1}}return a}(e.data),r=[];for(let t=0;t<3;t++)i=v(i),r[t]=i,h.debug(`趋势等级: ${t}, 趋势点数量 ${r[t].length}`);h.info(t+"趋势数据计算完毕！");try{h.info(`保存数据信息：${t}, 日期 ${e&&e.startDate} ～ ${e&&e.endDate}, 日线数据${e&&e.data.length}条，短期${r[0].length}, 中期 ${r[1].length}, 长期 ${r[2].length}`);let a={updateTime:c().toISOString(),tsCode:t,startDate:e.startDate,endDate:e.endDate,data:e.data,trends:r},i="trend",o=JSON.stringify(a),l=n(i,t);await $.writeFile(l,o,"utf-8"),h.info(`个股${t}趋势数据保存：${l}, 短期：${r&&r[0].length}，中期：${r&&r[1].length}，长期：${r&&r[2].length}`)}catch(a){throw new Error(`保存个股${t}趋势数据时出现错误，请检查后重新执行：${a}`)}e.data=null,e=null,i=null}async function T(){h.info("内存使用：%o",process.memoryUsage());let a=await t();if(!a||!a.data)return void h.error("没有读取到股票列表，无法处理日线数据");h.info("内存使用：%o",process.memoryUsage());let e=a.data.map(t=>({caller:O,args:[t.ts_code]}));if(h.info("内存使用：%o",process.memoryUsage()),e&&e.length>0){let t=f(e,20,"趋势数据计算");try{await Promise.all(t)}catch(t){h.error("趋势数据合并任务执行发生未知异常："+t)}t=null}h.info("趋势数据全部计算完毕！"),h.info("内存使用：%o",process.memoryUsage())}export{E as calculateAllDailyData,T as calculateAllTrendPoints,I as calculateDailyData,O as calculateTrendPoints,F as clearAllData,l as stockDataNames,m as updateData,y as updateStockInfoData};
