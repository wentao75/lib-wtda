const t=require("lodash"),a=require("os"),e=require("path"),i=require("fs"),r=i.promises,n=require("pino")({level:process.env.LOGGER||"info",prettyPrint:{levelFirst:!0,translateTime:"SYS:yyyy-yy-dd HH:MM:ss.l",crlf:!0},prettifier:require("pino-pretty")});function o(){return e.join(a.homedir(),".wtda")}async function s(){let a=null;try{await c();let i=e.join(o(),"stock-list.json");a=JSON.parse(await r.readFile(i,"utf-8")),t.isEmpty(a)||n.debug("股票列表更新时间 @"+a.updateTime)}catch(t){throw n.error("读取股票列表数据错误："+t),new Error("读取股票列表过程中出现错误，请检查后重新运行："+t)}return t.isEmpty(a)?{updateTime:"",data:[]}:a}async function d(){let a=null;try{await c();let i=e.join(o(),"index-list.json");a=JSON.parse(await r.readFile(i,"utf-8")),t.isEmpty(a)||n.debug("指数列表更新时间 @"+a.updateTime)}catch(t){throw n.error("读取指数列表数据错误："+t),new Error("读取指数列表过程中出现错误，请检查后重新运行："+t)}return t.isEmpty(a)?{updateTime:"",data:[]}:a}async function l(a){if(t.isEmpty(a))throw new Error("未设置读取股票代码");let i={updateTime:null,data:[]};try{await c();let t=e.join(o(),"daily",a+".json");try{i=JSON.parse(await r.readFile(t,"utf-8"))}catch(t){i={data:[]}}}catch(t){n.error("从本地读取日线数据时发生错误 "+t)}return i}async function c(){let t=o();try{await r.access(t,i.constants.F_OK|i.constants.R_OK|i.constants.W_OK)}catch(a){n.debug("检查数据根目录错误 "+a),await r.mkdir(t,{recursive:!0})}let a=e.join(t,"daily");try{await r.access(a,i.constants.F_OK|i.constants.R_OK|i.constants.W_OK)}catch(t){n.debug("检查日线历史目录错误 "+t),await r.mkdir(a,{recursive:!0})}let s=e.join(t,"info");try{await r.access(s,i.constants.F_OK|i.constants.R_OK|i.constants.W_OK)}catch(t){n.debug("检查信息数据目录错误 "+t),await r.mkdir(s,{recursive:!0})}}const u=require("lodash"),f=require("moment"),y=require("@wt/lib-taskqueue"),h=require("@wt/lib-tushare"),w=require("pino")({level:process.env.LOGGER||"info",prettyPrint:{levelFirst:!0,translateTime:"SYS:yyyy-yy-dd HH:MM:ss.l",crlf:!0},prettifier:require("pino-pretty")}),g=require("path"),p=require("fs"),m=p.promises;async function $(t=!1,a=!1,e=!1,i=!1,r=!1,n=!1){let o=f();w.info("获取和更新股票列表数据 ..."),w.debug(`参数：强制更新 ${t}, 全部更新 ${n}，更新股票日线 ${a}, 更新指数日线 ${r}`);let s=await h.stockBasic(),d={updateTime:o.toISOString(),data:s};await b(d,"stock-list.json"),w.info("股票列表数据更新完毕！"),w.info("获取和更新指数列表数据 ...");let l={updateTime:o.toISOString(),data:[]},c=await Promise.all(h.indexMarketList.map(async t=>h.indexBasic(t.code)));if(c&&c.length>0&&c.forEach(t=>{if(t&&t.length>0){let a=t.length,e=(t=t.filter(t=>u.isEmpty(t.exp_date))).length;w.debug(`指数过滤，总共${a}, 剩余${e}`),l.data.push(...t)}}),await b(l,"index-list.json"),w.info("更新指数列表数据完成！"),n||a){if(w.info("开始更新股票日线数据..."),u.isArray(s)&&s.length>0){let a=s.map(a=>({caller:S,args:[a.ts_code,t,"S"]})),e=y(a,20,"股票日线更新任务");try{w.debug("等待股票日线更新队列完成..."),await Promise.all(e),w.debug("股票日线更新队列全部执行完毕！")}catch(t){w.error("股票日线任务执行 错误！"+t)}}w.info(h.showInfo()),w.info("股票日线数据更新完毕!")}if(n||e){if(w.info("开始更新股票复权因子数据..."),u.isArray(s)&&s.length>0){let a=s.map(a=>({caller:j,args:[a.ts_code,t]})),e=y(a,20,"股票复权因子更新任务");try{w.debug("等待股票日线复权因子更新队列完成..."),await Promise.all(e),w.debug("股票日线复权因子更新队列全部执行完毕！")}catch(t){w.error("股票日线复权因子任务执行 错误！"+t)}}w.info(h.showInfo()),w.info("股票复权因子数据更新完毕!")}if(n||i){if(w.info("开始更新基本面数据..."),u.isArray(s)&&s.length>0){let a=s.map(a=>({caller:O,args:[a.ts_code,t]})),e=y(a,20,"基本面更新任务");try{w.debug("等待基本面数据更新队列完成..."),await Promise.all(e),w.debug("基本面数据更新队列全部执行完毕！")}catch(t){w.error("股票基本面更新任务执行 错误！"+t)}}w.info(h.showInfo()),w.info("股票基本面数据更新完毕!")}if((n||r)&&(w.info("指数日线数据更新开始 ..."),u.isArray(l.data)&&l.data.length>0)){let a=l.data.map(a=>({caller:S,args:[a.ts_code,t,"I"]})),e=y(a,20,"指数日线更新任务");try{w.debug("等待指数日线更新队列完成 ..."),await Promise.all(e),w.debug("指数日线数据更新队列全部完成！")}catch(t){w.error("指数日线任务执行 错误：%o",t)}w.info(h.showInfo()),w.info("指数日线数据更新完毕！")}}async function S(t,a=!1,e="S"){if(u.isEmpty(t))return{data:[]};if("S"!==e&&"I"!==e)return{data:[]};let i;try{if(a){let a;w.debug("force update "+t),a="S"===e?await h.stockDaily(t):await h.indexDaily(t),i={updateTime:f().toISOString(),data:a},w.info(`日线数据强制更新，代码 ${t}, 更新时间：${i.updateTime}, 总条数：${i.data&&i.data.length}`)}else{i=await l(t);let a,r="";if(i.data&&i.data.length>0){let a=i.data[0].trade_date;r=f(a,"YYYYMMDD").add(1,"days").format("YYYYMMDD");let e=f();if(e.diff(r,"days")<=0&&e.hours()<15)return void w.log("没有新的数据，不需要更新 "+t)}a="S"===e?await h.stockDaily(t,r):await h.indexDaily(t,r),a&&a.length>0?(i.updateTime=f().toISOString(),i.data.unshift(...a),w.info(`日线数据更新，代码 ${t}, 更新时间：${i.updateTime}, 更新条数：${a&&a.length}，总条数：${i.data&&i.data.length}`)):(i=null,w.info("日线数据没有更新，代码 "+t))}}catch(a){throw w.error(`${t} 日线数据更新时发生错误，${a}`),a}try{if(i){await c();let a=JSON.stringify(i),e=g.join(o(),"daily",t+".json");await m.writeFile(e,a,"utf-8")}}catch(a){throw new Error("保存日线历史数据时出现错误，请检查后重新执行："+t+","+a)}}async function j(a,i=!1){if(u.isEmpty(a))return{data:[]};let s;try{if(i)w.debug("force update "+a),s={updateTime:f().toISOString(),data:await h.adjustFactor(a)},w.info(`股票复权因子数据强制更新，代码 ${a}, 总条数：${s.data&&s.data.length}`);else{s=await async function(a){if(t.isEmpty(a))throw new Error("未设置读取股票代码");let i={updateTime:null,data:[]};try{await c();let t=e.join(o(),"daily",a+".adj.json");try{i=JSON.parse(await r.readFile(t,"utf-8"))}catch(a){n.debug(`读取股票复权因子文件${t} 错误：${a}`),i={updateTime:null,data:[]}}}catch(t){n.error("从本地读取日线复权因子数据时发生错误 "+t)}return i}(a);let i="";if(s.data&&s.data.length>0){let t=s.data[0].trade_date;i=f(t,"YYYYMMDD").add(1,"days").format("YYYYMMDD");let e=f();if(e.diff(i,"days")<=0&&e.hours()<15)return void w.debug("没有新的复权因子数据，不需要更新 "+a)}let d=await h.adjustFactor(a,i);if(w.debug(`${a} 复权因子数据返回：${d&&d.length}`),!(d&&d.length>0))return s=null,void w.info("日线复权因子数据没有更新，代码 "+a);s.updateTime=f().toISOString(),s.data.unshift(...d),w.info(`日线复权因子数据更新，代码 ${a}, 更新条数：${d&&d.length}，总条数：${s.data&&s.data.length}`)}}catch(t){throw w.error(`${a} 日线复权因子数据更新时发生错误，${t}`),t}try{if(s&&s.data&&s.data.length>0){let t=JSON.stringify(s),e=g.join(o(),"daily",a+".adj.json");await m.writeFile(e,t,"utf-8")}}catch(t){throw new Error("保存复权因子数据时出现错误，请检查后重新执行："+a+","+t)}}async function O(a,i=!1){if(u.isEmpty(a))return{data:[]};let s;try{if(i)w.debug("force update "+a),s={updateTime:f().toISOString(),data:await h.dailyBasic(a)},w.info(`股票基本面数据强制更新，代码 ${a}, 总条数：${s.data&&s.data.length}`);else{s=await async function(a){if(t.isEmpty(a))throw new Error("未设置读取股票代码");let i={updateTime:null,data:[]};try{await c();let t=e.join(o(),"info",a+".info.json");try{i=JSON.parse(await r.readFile(t,"utf-8"))}catch(a){n.debug(`读取基本面文件${t} 错误：${a}`),i={updateTime:null,data:[]}}}catch(t){n.error("从本地读取基本面数据时发生错误 "+t)}return i}(a);let i="";if(s&&s.data&&s.data.length>0){let t=s.data[0].trade_date;i=f(t,"YYYYMMDD").add(1,"days").format("YYYYMMDD");let e=f();if(e.diff(i,"days")<=0&&e.hours()<15)return void w.debug("没有新的股票基本面数据，不需要更新 "+a)}let d=await h.dailyBasic(a,i);if(w.debug(`${a} 基本面数据返回：${d&&d.length}`),!(d&&d.length>0))return s=null,void w.info("基本面数据没有更新，代码 "+a);s.updateTime=f().toISOString(),s.data.unshift(...d),w.info(`基本面数据更新，代码 ${a}, 更新条数：${d&&d.length}，总条数：${s.data&&s.data.length}`)}}catch(t){throw w.error(`${a} 基本面数据更新时发生错误，${t}`),t}try{if(s&&s.data&&s.data.length>0){let t=JSON.stringify(s),e=g.join(o(),"info",a+".basic.json");await m.writeFile(e,t,"utf-8")}}catch(t){throw new Error("保存基本面数据时出现错误，请检查后重新执行："+a+","+t)}}async function b(t,a){try{await c();let e=JSON.stringify(t),i=g.join(o(),a);await m.writeFile(i,e,{encoding:"utf-8"})}catch(t){throw new Error("保存列表数据时出现错误，请检查后重新执行："+t)}}async function Y(){try{w.debug("检查根目录状态："),await c(),w.info("清理股票列表数据...");let t=g.join(o(),"stock-list.json");try{await m.access(t,p.constants.F_OK);try{await m.unlink(t)}catch(t){throw t}}catch(t){}w.info("清理股票列表数据完成"),w.info("清理指数列表数据...");let a=g.join(o(),"index-list.json");try{await m.access(a,p.constants.F_OK);try{await m.unlink(a)}catch(t){throw t}}catch(t){}w.info("清理指数列表数据完成"),w.info("清理股票历史数据...");let e=g.join(o(),"daily");try{await m.access(e,p.constants.F_OK);try{let t=await m.readdir(e);w.info(`共有${t.length}个历史数据文件待删除`),t.forEach(async t=>{await m.unlink(g.join(e,t))})}catch(t){throw t}}catch(t){}w.info("清理股票历史数据完成")}catch(t){throw new Error("清除所有已经同步数据发生错误："+t)}}export{Y as clearAllData,l as readStockDaily,d as readStockIndexList,s as readStockList,j as updateAdjustFactorData,O as updateDailyBasicData,S as updateDailyData,$ as updateData};
